
<div class="nav-bar">
	<?php echo Phalcon\Tag::linkTo('index', 'Home') ?> Â» Documentation
</div>

<div class="doc-paragraph">
	<h2>Using Views</h2>
	Views represent the user interface of your application. Views are often HTML files with embedded
	PHP code that perform tasks related solely to the presentation of the data. Views handle the job
	of providing data to the web browser or other tool that is used to make requests from your application.
</div>

<div class="doc-paragraph">
	The <?php echo Tag::classLink('Phalcon_View', 'View component') ?> is responsible for the managing of the standard way to generate the
	final presentation to the browser.
</div>

<div class="doc-paragraph">
	A hierarchy of files is supported by the component allowing reducing the coding
	by creating common points for the application, controllers or by implementing templates.
</div>

<div class="doc-paragraph">
	<h3><a name="controllers">Integrating Views with Controllers</a></h3>
	Phalcon automatically pulls down the execution flow to the view component when the controller has ended its work.
	View component will look in the views directory for another directory named as the last controller executed.
</div>

<div class="doc-paragraph">
	For instance, a request is made to the next URL <i>http://127.0.0.1/blog/posts/show/301</i>, by default Phalcon
	will split the URL as is follows:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<td align="right"><b>Server Address</b></td>
			<td>127.0.0.1</td>
		</tr>
		<tr>
			<td align="right"><b>Phalcon Directory</b></td>
			<td>blog</td>
		</tr>
		<tr>
			<td align="right"><b>Controller</b></td>
			<td>posts</td>
		</tr>
		<tr>
			<td align="right"><b>Action</b></td>
			<td>show</td>
		</tr>
		<tr>
			<td align="right"><b>Parameter</b></td>
			<td>301</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	The dispatcher will look for a "PostsController" and its action "showAction". A simple controller file for this example:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function showAction($postId)
  {
    //Pass the $postId parameter to the view
    $this->view->setVar("postId", $postId);
  }

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	The setVar lets to create variables on the fly for each view executed in the current request. The above example
	shows how to pass the $postId parameter to the views with the same name.
</div>

<div class="doc-paragraph">
	By default the View component uses PHP itself as template engine. In this case views should have the .phtml extension.
	If the views directory is <i>app/views</i> then view component will find automatically for these 3 view files.
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Name</th>
			<th>File</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Action View</td>
			<td>app/views/posts/show.phtml</td>
			<td>This is the view related to the action. It only will be shown when the "show" action was executed.</td>
		</tr>
		<tr>
			<td>Controller Layout</td>
			<td>app/views/layouts/posts.phtml</td>
			<td>This is the view related to the controller. It only will be shown for every action
				executed within the controller "posts". All the code implemented in the layout will reused for
				all the actions in this controller.
			</td>
		</tr>
		<tr>
			<td>Main Layout</td>
			<td>app/views/index.phtml</td>
			<td>This is main action it will be shown for every controller or action executed within the application.</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	You are not required to implement all of the files mentioned above. <?php echo Tag::classLink('Phalcon_View') ?> simply will pass to next view level in the hierarchy of files.
	If 3 view files will implement, they could be looked as follows:
</div>

<div class="doc-center">
<?php echo hyperlight('
<!-- app/views/posts/show.phtml -->

<h3>This is show view!</h3>

<p>I have received the parameter <?= $postId ?></p>

', 'php'); ?>

<?php echo hyperlight('
<!-- app/views/layouts/posts.phtml -->

<h2>This is the "posts" controller layout!</h2>

<?= $this->getContent() ?>

', 'php'); ?>
</div>

<div class="doc-center">
<?php echo hyperlight('
<!-- app/views/index.phtml -->
<html>
 <head>
  <title>Example</title>
 </head>
 <body>

   <h1>This is main layout!</h1>

   <?= $this->getContent() ?>

 </body>
</html>
', 'php'); ?>
</div>

<div class="doc-paragraph">
	Note the lines where the method <i>$this->getContent()</i> was called out.
	It tells to View where to embed the content of the previous view executed in the hierarchy.
	As above, the final output sent to the browser will:
</div>

<div class="doc-center">
	<?php echo Phalcon\Tag::image('img/views-1.png') ?>
</div>

<div class="doc-paragraph">
	The generated HTML by the request will be:
</div>

<div class="doc-center">
<?php echo hyperlight('
<!-- app/views/index.phtml -->
<html>
 <head>
  <title>Example</title>
 </head>
 <body>

   <h1>This is main layout!</h1>

   <!-- app/views/layouts/posts.phtml -->

   <h2>This is the "posts" controller layout!</h2>

     <!-- app/views/posts/show.phtml -->

     <h3>This is show view!</h3>

     <p>I have received the parameter 101</p>

 </body>
</html>
', 'php'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="partials">Using Partials</a></h3>
	Partial templates are another way of breaking the rendering process
	into simpler chunks. With a partial, you can move the code for rendering a particular
	piece of a response to its own file.
</div>

<div class="doc-paragraph">
	One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a
	view so that you can grasp what's going on more easily. For example, you might have a view that looked like this:
</div>

<div class="doc-center">
<?php echo hyperlight('
<?php $this->partial("shared/ad_banner") ?>

<h1>Robots</h1>

<p>Check out our specials for robots:</p>
...

<?php $this->partial("shared/footer") ?>'
, 'php'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="transfer">Transfer values from the controller to views</a></h3>
	You may need to pass values from the action to the view to be presented or visualized on them. In this case
	you can access the view component within the controller and use the method setVar:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function indexAction()
   {

   }

   function showAction()
   {
      //Pass all the posts to the views
      $this->view->setVar("posts", Posts:find());
   }

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	Magically a variable with the name of the first parameter become available. You can use it as you want.
</div>

<div class="doc-center">
<?php echo hyperlight('

<div class="post">
<?php

  foreach($posts as $post){
    echo "<h1>", $post->title, "</h1>";
  }

?>
</div>

', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="rendering">Control Rendering Levels</a></h3>
	As seen above, there is a view hierarchy. It may also be needed to control the level of rendering produced
	finally by the view component. The method Phalcon_View::setRenderLevel provides this functionality.
</div>

<div class="doc-paragraph">
	This method can be invoked from the controller or from a superior view layer to prevent that others are presented.
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function indexAction()
   {

   }

   function findAction()
   {

     //This is an Ajax response so don\'t generate any kind of view
     $this->view->setRenderLevel(Phalcon_View::LEVEL_NO_RENDER);

     //...
   }

   function showAction($postId)
   {
     //Shows only the view related to the
     $this->view->setRenderLevel(Phalcon_View::LEVEL_ACTION_VIEW);
   }

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	The available render levels are:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Class Constant</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>LEVEL_NO_RENDER</td>
			<td>Indicates to avoid generating any kind of presentation.</td>
		</tr>
		<tr>
			<td>LEVEL_ACTION_VIEW</td>
			<td>Generates the presentation to the view associated to the action.</td>
		</tr>
		<tr>
			<td>LEVEL_BEFORE_TEMPLATE</td>
			<td>Generates presentation templates prior to the controller layout.</td>
		</tr>
		<tr>
			<td>LEVEL_LAYOUT</td>
			<td>Generates the presentation to the controller layout.</td>
		</tr>
		<tr>
			<td>LEVEL_AFTER_TEMPLATE</td>
			<td>Generates the presentation to the templates after the controller layout.</td>
		</tr>
		<tr>
			<td>LEVEL_MAIN_LAYOUT</td>
			<td>Generates the presentation to the main layout. File views/index.phtml</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="models">Using models at presentation</a></h3>
	Application models are always available at the presentation. Autoloader automatically will instantiate them at runtime:
</div>

<div class="doc-center">
<?php echo hyperlight('

<div class="categories">
<?php

foreach (Catergories::find("status=1") as $category) {
   echo "<span class=\'category\'>", $category->name, "</span>";
}

?>
</div>

', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	Although you may perform insert or update operations at views, we only recommend
	reading records at them because is not possible to forward the execution flow to another
	controller in case of errors.
</div>

<div class="doc-paragraph">
	<h3><a name="pick">Picking Views</a></h3>
	As mentioned above, when Phalcon_View is managed by <?php echo Tag::classLink('Phalcon_Controller_Front') ?>
	the view rendered is the one related with the last controller and action executed. You could
	override this by using the Phalcon_View::pick method:
</div>

<div class="doc-center">
<?php echo hyperlight('

<?php

class ProductsController extends Phalcon_Controller
{

   function listAction()
   {
      //Pick "views-dir/products/search" as view to render
      $this->view->pick("products/search");
   }

}

', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	<h4><a name="caching">Caching View Fragments</a></h4>
	Sometimes when you develop dynamic websites and they arenât updated very often,
	the output of some pages are exactly the same between requests.
	Phalcon_View allows caching a part of the rendered output or the entire one.
</div>

<div class="doc-paragraph">
	Basically, Phalcon_View is integrated with the <?php echo Tag::classLink("Phalcon_Cache") ?>
	component to provide an easier way to cache output fragments. You could manually set the cache
	handler or set a global handler:
</div>

<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller {

    function initialize(){

       //Cache data for one day by default
       $frontendOptions = array(
          "lifetime" => 86400
       );

       //File cache settings
       $backendOptions = array(
          "cacheDir" => "../app/cache/"
       );

       //Create a memcached cache
       $cache = Phalcon_Cache::factory("Output", "Memcached", $frontendOptions, $backendOptions);

       //Set the cache to the view component
       $this->view->setCache($cache);
    }

    function showAction(){
    	//Cache the view using the default settings
        $this->view->cache(true);
    }

    function showArticleAction(){
    	//Cache this view for 1 hour
        $this->view->cache(array("lifetime" => 3600));
    }

    function resumeAction(){
    	//Cache this view for 1 day with the key "resume-cache"
        $this->view->cache(array("lifetime" => 86400, "key" => "resume-cache"));
    }

}', 'php'); ?>

<div class="doc-paragraph">
	The example above a cache was implemented in the initialize method, this only applies
	to the current controller. If you want to create a cache for all drivers it's better to set options
	in the configuration file of the application:
</div>

<?php echo hyperlight('
[views]
cache.adapter = "File"
cache.cacheDir = "cacheDir"
cache.lifetime = 86400
', 'iphp'); ?>

<div class="doc-paragraph">
	<h3><a name="engines">Template Engines</a></h3>
	From version 0.4.0, Phalcon_View allows you to use other template engines instead of plain PHP.
	This helps non-developers create and design views with less effort. Actually, only
	<a href="https://github.com/bobthecow/mustache.php">Mustache</a> and
	<a href="http://twig.sensiolabs.org/">Twig</a> are supported.
</div>

<div class="doc-paragraph">
	Other template engines different than PHP require complex text parsing using external PHP libraries
	in order to generate the final view, this could increase the resources that your application is currently using.
</div>

<div class="doc-paragraph">
	If an external template engine is used, Phalcon_View provide you exactly the
	same view hierarchy and it's still possible to access the API inside these templates.
</div>

<div class="doc-paragraph">
	<h4><a name="changing-engine">Changing the Template Engine</a></h4>
	You can replace or add more template engines from the controller as follows:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function indexAction()
   {
     //Changing PHP engine by Mustache
     $this->view->registerEngines(array(
       ".mhtml" => "Mustache"
     ));
   }

   function showAction()
   {
     //Using both PHP and Mustache engines
     $this->view->registerEngines(array(
       ".phtml" => "Php",
       ".mhtml" => "Mustache"
     ));
   }

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	It is possible to completely replace template engines or using more than one at the same time.
	Phalcon_View::registerEngines receives an array with template engines.
	The key of each engine is an extension that helps to differentiate one from another.
	Templates related to that engines must have those extensions.
</div>

<div class="doc-paragraph">
	The order in which templates are registered means more relevance than others. If Phalcon_View
	finds two views with the same name but different extension only the first one will
	render.
</div>

<div class="doc-paragraph">
	<h4><a name="mustache">Using Mustache</a></h4>
	<a href="http://mustache.github.com/">Mustache</a> is a logic-less template engine available for many platforms and languages.
	A PHP implementation is available <a href="https://github.com/bobthecow/mustache.php">here</a>.
</div>

<div class="doc-paragraph">
	You need to manually load the Mustache library before use its engine adapter. This could be done
	by making a require instruction or registering an autoload function first.
</div>

<div class="doc-center">
<?php echo hyperlight('require "path/to/Mustache.php";', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	Then, in the controller it's necessary to replace or add the Mustache adapter to the
	view component. If all of your actions will use this engine register it in the
	initialize method of the controller.
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function initialize()
   {
     //Changing PHP engine by Mustache
     $this->view->registerEngines(array(
       ".mhtml" => "Mustache"
     ));
   }

   function showAction()
   {

     $this->view->setVar("showPost", true);
     $this->view->setVar("title", "some title");
     $this->view->setVar("body", "a cool content");

   }

}', 'php') ?>

<div class="doc-paragraph">
	A related view (views-dir/posts/show.mhtml) could be defined using the Mustache syntax:
</div>

<div class="doc-center">
<?php echo hyperlight('

{{#showPost}}
  <h1>{{title}}</h1>
  <p>{{body}}</p>
{{/showPost}}

', 'iphp') ?>
</div>

<div class="doc-paragraph">
	Additionally, as seen above, you must call the method $this->getContent() inside a view to include the contents
	of a view at a higher level. In Moustache, this can be done as follows:
</div>

<div class="doc-center">
<?php echo hyperlight('

<div class="some-menu">
  <! -- the menu -->
</div>

<div class="some-main-content">
  {{getContent}}
</div>

', 'iphp') ?>
</div>

<div class="doc-paragraph">
	Finally, if you need more power, it's possible define your own Mustache instance instead of
	the implicitly created by the adapter:
</div>

<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function showAction()
   {

     //Instancing a mustache object or a sub-class of Mustache
     $presenter = new CustomMustache();

     // ... make some mustache stuff

     //Registering the object as an option
     $this->view->registerEngines(array(
       ".mhtml" => array("Mustache", array(
          "mustache" => $presenter
       ))
     ));
   }

}', 'php') ?>

<div class="doc-paragraph">
	<h4><a name="twig">Using Twig</a></h4>
	<a href="http://twig.sensiolabs.org/">Twig</a> is a modern template engine for PHP.
</div>

<div class="doc-paragraph">
	You need to manually load the Twig library before use its engine adapter. This could be done
	by registering its autoloader:
</div>

<div class="doc-center">
<?php echo hyperlight('require "path/to/twig.php";
Twig_Autoloader::register();', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	As seen above, it's necessary to replace the default engine by twig or use it together with other.
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function initialize()
   {
     //Changing PHP engine by Twig
     $this->view->registerEngines(array(
       ".twig" => "Twig"
     ));
   }

   function showAction()
   {

     $this->view->setVar("showPost", true);
     $this->view->setVar("title", "some title");
     $this->view->setVar("body", "a cool content");

   }

}', 'php') ?>

<div class="doc-paragraph">
	In this case, the related view will be views-dir/posts/show.twig, this is a file that contains Twig code:
</div>

<div class="doc-center">
<?php echo hyperlight('

{{% if showPost %}}
  <h1>{{ title }}</h1>
  <p>{{ body }}</p>
{{% endif %}}

', 'iphp') ?>
</div>

<div class="doc-paragraph">
	To include the contents of a view at a higher level, the "content" variable is available to do that:
</div>

<div class="doc-center">
<?php echo hyperlight('

<div class="some-messages">
  {{ content }}
</div>

', 'iphp') ?>
</div>

<div class="doc-paragraph">
	Phalcon implicitly creates a twig object as follows:
</div>

<div class="doc-center">
<?php echo hyperlight('
$loader = new Twig_Loader_Filesystem($viewsDirectory);
$twig = new Twig_Environment($loader);
', 'iphp') ?>
</div>

<div class="doc-paragraph">
	If you want to modify any of those variables before render the views,
	you can pre-build and pass them as options:
</div>

<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

   function showAction()
   {

     //Creating manually the Twig object
     $loader = new Twig_Loader_Filesystem($this->view->getViewsDir());
	 $twig = new Twig_Environment($loader, array(
        "cache" => "/path/to/compilation_cache",
     ));

     //Registering the object as an option
     $this->view->registerEngines(array(
       ".twig" => array("Mustache", array(
          "twig" => $twig
       ))
     ));

   }

}', 'php') ?>

<div class="doc-paragraph">
	<h4><a name="own-engine">Creating your own Template Engine</a></h4>
	There are many template engines out there, you might want to integrate one of them or create your own.
	In this section we will explain how to do this.
</div>

<div class="doc-paragraph">
	A template adapter is only instantiated once across the execution of the request. Normally, it only
	need to implement two methods: __construct and render. The first one receives the Phalcon_View instance
	which creates the engine adapter and the options passed when the engine was registered.
</div>

<div class="doc-paragraph">
	By the other hand, render receives an absolute path to the view file and the view-params
	set using $this->view->setVar(). You could read or require it whether it's necessary.
</div>

<?php echo hyperlight('<?php

class MyTemplateAdapter extends Phalcon_View_Engine
{

    /**
     * Adapter constructor
     *
     * @param Phalcon_View $view
     * @param array $options
     */
    function __construct($view, $options)
    {
       parent::__construct($view, $options);
    }

    /**
     * Renders a view using the template engine
     *
     * @param string $path
     * @param array $params
     */
    function render($path, $params)
    {

        //Access view
        $view = $this->_view;

        //Access options
        $options = $this->_options;

    }

}', 'php') ?>

<div class="doc-paragraph">
	When registering the engine, a instance of your template adapter must be passed along with the desired extension:
</div>

<?php echo hyperlight('<?php

class SomeController extends Phalcon_Controller
{

   function someAction()
   {

     //Registering the object as an engine
     $this->view->registerEngines(array(
       ".my-html" => new MyTemplateAdapter()
     ));

   }

}', 'php') ?>

<div class="doc-paragraph">
	<h3><a name="environment">View Environment</a></h3>
	Every view executed is included inside a <?php echo Tag::classLink('Phalcon_View_Engine') ?> instance so you can have access to its environment
	allowing getting useful information you can apply in your own developments.
</div>

<div class="doc-paragraph">
	The following example shows how to write a Jquery <a href="http://api.jquery.com/jQuery.ajax/">ajax request</a>
	using an url with the framework conventions. The method url is called from a $this instance that makes
	reference to a Phalcon_View object:
</div>

<div class="doc-center">
<?php echo hyperlight('
$.ajax({
  url: "<?= $this->url("cities/get") ?>"
}).done(function() {
  alert("Done!");
});
', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="stand-alone">Stand-Alone Component</a></h3>
	All components of the framework can be used individually by being loose coupled to each other.
	Phalcon_View is not the exception, the following shows how to use it stand alone:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

$view = new Phalcon_View();
$view->setViewsDir("../app/views/");

//Passing variables to the views, these will be created as local variables
$view->setVar("someProducts", $products);
$view->setVar("someFeatureEnabled", true);

$view->start();
$view->render("products", "list");
$view->finish();

echo $view->getContent();

', 'php'); ?>
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon\Tag::linkTo('documentation/models', 'â Working with Models') ?>
			</td>
			<td align="right">
				<?php echo Phalcon\Tag::linkTo('documentation/tags', 'View Helpers â') ?>
			</td>
		</tr>
	</table>
</div>
