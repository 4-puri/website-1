
<div class="nav-bar">
	<?php echo Phalcon\Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Reading Configuration</h2>
	The component <?php echo Tag::classLink('Phalcon_Config') ?> allows to read configuration files in
	different formats into PHP objects facilitating the reading thereof.
</div>

<div class="doc-paragraph">
	<h3><a name="adapters">File Adapters</a></h3>
	This component makes use of adapters to encapsulate the reading details of each format:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>File Type</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Ini</td>
			<td>Uses INI files to store settings. Internally it uses the PHP function parse_ini_file.</td>
		</tr>
		<tr>
			<td>Array</td>
			<td>Uses PHP multidimensional arrays to store the configuration. In terms of performance is the best.</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="arrays">Native Arrays</a></h3>
	The next example shows how to convert native arrays into Phalcon_Config objects. Because no files are read
	the performance is better.
</div>

<?php echo hyperlight('<?php

$settings = array(
	"database" => array(
 		"adapter" => "Mysql",
 		"host" => "localhost",
		"username" => "scott",
		"password" => "cheetah",
		"name" => "test_db"
	),
 	"phalcon" => array(
 		"controllersDir" => "../app/controllers/",
 		"modelsDir" => "../app/models/",
		"viewsDir" => "../app/views/"
	),
	"mysetting" => "the-value"
);

$config = new Phalcon_Config($settings);

echo $config->phalcon->controllersDir, "\n";
echo $config->database->username, "\n";
echo $config->mysetting, "\n";

', 'php'); ?>

<div class="doc-paragraph">
If you want to better organize your project you can save the array in another file and then read it.
</div>

<?php echo hyperlight('<?php

require "config/config.php";
$config = new Phalcon_Config($settings);

', 'php'); ?>

<div class="doc-paragraph">
	<h3>Reading INI Files</h3>
	Ini files are a common way to store settings. Phalcon_Config uses the optimized
	PHP function parse_ini_file to read these files. Files sections are parsed into sub-settings that
	can be accessed then.
</div>

<?php echo hyperlight('
[database]
adapter = Mysql
host = localhost
username = scott
password = cheetah
name = test_db

[phalcon]
controllersDir = "../app/controllers/"
modelsDir = "../app/models/"
viewsDir = "../app/views/"

', 'php'); ?>

<?php echo hyperlight('<?php

$config = new Phalcon_Config_Adapter_Ini("path/config.ini");

echo $config->phalcon->controllersDir, "\n";
echo $config->database->username, "\n";

', 'php'); ?>


<div class="doc-paragraph">
	<h3>Related Guides</h3>
	<ul>
		<li><?php echo Phalcon\Tag::linkTo('documentation/settings', 'Settings supported by the Framework') ?></li>
	</ul>
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon\Tag::linkTo('documentation/filter', '← Filtering and Sanitizing') ?>
			</td>
			<td align="right">
				<?php echo Phalcon\Tag::linkTo('documentation/pagination', 'Data Pagination →') ?>
			</td>
		</tr>
	</table>
</div>
