
<div class="nav-bar">
	<?php echo Phalcon\Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Using Controllers</h2>
	The controllers provide a number of methods that are called actions. Actions are methods on a controller that
	handle requests. By default all public methods on a controller are an action, and accessible from a URL.
	Actions are responsible for interpreting the request and creating the response.
	Usually responses are in the form of a rendered view, but there are other ways to create responses as well.
</div>

<div class="doc-paragraph">
	For instance, when you access a URL like this: <i>http://localhost/blog/posts/show/2012/the-post-title</i>
	Phalcon by default will decompose each part like this:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<td align="right"><b>Phalcon Directory</b></td>
			<td>blog</td>
		</tr>
		<tr>
			<td align="right"><b>Controller</b></td>
			<td>posts</td>
		</tr>
		<tr>
			<td align="right"><b>Action</b></td>
			<td>show</td>
		</tr>
		<tr>
			<td align="right"><b>Parameter</b></td>
			<td>2012</td>
		</tr>
		<tr>
			<td align="right"><b>Parameter</b></td>
			<td>the-post-title</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	In this case, the PostsController will handle this request. The controller file will be looked up in the controllers directory.
	Controllers should have the suffix "Controller" while actions the suffix "Action". It would be like:
</div>

<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function showAction($year, $postTitle)
  {

  }

}', 'php'); ?>

<div class="doc-paragraph">
	As you can see, additional URI parameters become method parameters. So you can access it easily as local variables.
</div>

<div class="doc-paragraph">
	<h3><a name="dispatch-loop">Dispatch Loop</a></h3>
	The dispatch loop will be executed within the Dispatcher until there are not pendent actions for execution.
	In the previous example only once action was executed. Now we'll see how forward the execution flow
	to another controller/action.
</div>

<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function showAction($year, $postTitle)
  {
     Phalcon_Flash::error("You don\'t have permission to access this area");
     //Forward flow to another action
     $this->_forward("users/signin");
  }

}', 'php'); ?>

<div class="doc-paragraph">
	If users don't have permissions to access a certain action then will be forwarded to another controller.
</div>

<?php echo hyperlight('<?php

class UsersController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function signinAction()
  {

  }

}', 'php'); ?>

<div class="doc-paragraph">
	You may do many "forwards" as you require. If there are not pendent action the dispatch loop will reach the end,
	and automatically will pull down the view part of MVC managed by <?php echo Tag::classLink('Phalcon_View') ?>.
</div>

<div class="doc-paragraph">
	<h3><a name="initializing">Initializing Controllers</a></h3>
	When you implement the "initialize" method on any controller, it will be executed the first time an action
	requests to a certain controller. The use of the "__construct" method is not recommended.
</div>

<?php

echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function initialize()
  {
    $this->config = array(
       "mySetting" => "value"
    );
  }

  function saveAction(){
    if ($this->config["mySetting"] == "value") {
      //...
    }
  }

}

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="dispatch-events">Dispatch Events</a></h3>
	Events enable controllers to run shared pre- and post- processing code for its actions.
	Every time a controller action is executed, two events are provided to check security conditions or modify the application control flow.
	Those events are "beforeDispatch" and "afterDispatch". The first one is executed before the controller action is dispatched, developers
	can change the control flow by using a forward in that event. The second one is the "afterDispatch" event, this one is executed after
	the controller action.
</div>

<?php

echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function beforeDispatch()
  {
    if (Phalcon_Session::get("hasAuth") == false) {
      //Check whether user is authenticated and forwards him to login if not
      $this->_forward("session/login");
      return false;
    }
  }

  function indexAction()
  {

  }

}

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="request-response">Request and Response</a></h3>
	In every controller there are two public properties pointing to the request and the response
	objects associated with the request cycle that is currently in execution. The "request" attribute
	contains an instance of <?php echo Tag::classLink('Phalcon_Request') ?> and the "response" attribute contains a
	<?php echo Tag::classLink('Phalcon_Response') ?> representing what is going to be sent back to the client.
</div>

<?php

echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function saveAction()
  {

    //Check if request has made with POST
    if ($this->request->isPost() == true) {

      //Access POST data
      $customerName = $this->request->getPost("name");
      $customerBorn = $this->request->getPost("born");

    }

  }

}

', 'php'); ?>

<div class="doc-paragraph">
	Moreover, the response object is not usually used directly, but is built up before the execution of the
	action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:
</div>

<?php

echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function notFoundAction()
  {
    //Send a HTTP 404 response header
    $this->response->setStatusCode(404, "Not Found");
  }

}

', 'php'); ?>

<div class="doc-paragraph">
	Learn more about the request environment in its <?php echo Phalcon\Tag::linkTo('documentation/request', 'documentation article.') ?>
</div>

<div class="doc-paragraph">
	<h3><a href="session-data">Session Data</a></h3>
	Sessions help us to maintain persistent data between requests. You could access a <?php echo Tag::classLink('Phalcon_Session_Namespace') ?>
	from any controller to encapsulate data that should be persistent.
</div>

<?php

echo hyperlight('<?php

class UserController extends Phalcon_Controller
{

  function indexAction()
  {
    $this->session->name = "Michael";
  }

  function welcomeAction()
  {
    echo "Welcome, ", $this->session->name;
  }

}

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a href="enviroment">Controller Environment</a></h3>
	Phalcon_Controller provide you some useful public attributes to interact with other
	active parts of the framework. Checking out the API of those components will give you
	the knowledge to access important information you could need while executing an action:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Component</th>
			<th>Description</th>
			<th>Attribute</th>
		</tr>
		<tr>
			<td><?php echo Tag::classLink('Phalcon_Request') ?></td>
			<td>Encapsulate the request information, such as HTTP method, POST and GET variables, POST files, languages, charsets, etc</td>
			<td>$this->request</td>
		</tr>
		<tr>
			<td><?php echo Tag::classLink('Phalcon_Response') ?></td>
			<td>Encapsulate the response information, such as response headers, response body, etc.</td>
			<td>$this->response</td>
		</tr>
		<tr>
			<td><?php echo Tag::classLink('Phalcon_View') ?></td>
			<td>Encapsulate the view that will be displayed to the used</td>
			<td>$this->view</td>
		</tr>
		<tr>
			<td><?php echo Tag::classLink('Phalcon_Dispatcher') ?></td>
			<td>Encapsulate details of the dispatching process</td>
			<td>$this->dispatcher</td>
		</tr>
		<tr>
			<td><?php echo Tag::classLink('Phalcon_Model_Manager') ?></td>
			<td>Encapsulate the models initialization, meta-data, etc</td>
			<td>$this->model</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a href="controller-base">Creating a Base Controller</a></h3>
	Some application features like access control, translation, cache, and template engines
	are often common to multiple controllers. In those cases create a "base controller" could be useful.
	A base controller is simply a class that should be inherited by the controllers instead of
	directly inheriting Phalcon_Controller.
</div>

<div class="doc-paragraph">
	This class could be located at any place, but for organizational conventions we recommend to
	put it into the controllers directory, by example: apps/controllers/ControllerBase.php.
	The bootstrap file must include this class:
</div>

<div class="doc-center">
<?php echo hyperlight('require "../app/controllers/ControllerBase.php";', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	The implementation of common actions and method is now easy when defining them here:
</div>

<?php

echo hyperlight('<?php

class ControllerBase extends Phalcon_Controller
{

  /**
   * This action is available for multiple controllers
   */
  function someAction()
  {

  }

}

', 'php'); ?>

<div class="doc-paragraph">
	The controllers now inherit from ControllerBase:
</div>

<?php

echo hyperlight('<?php

class UsersController extends ControllerBase
{

}

', 'php'); ?>

<div class="doc-paragraph">
	This class could be located at any place, but for organizational conventions we recommend to
	put it into the controllers directory, by example: apps/controllers/ControllerBase.php
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon\Tag::linkTo('documentation/mvc', '← The MVC Architecture') ?>
			</td>
			<td align="right">
				<?php echo Phalcon\Tag::linkTo('documentation/models', 'Working with Models →') ?>
			</td>
		</tr>
	</table>
</div>
