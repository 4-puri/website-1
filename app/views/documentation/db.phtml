<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> Â» Documentation
</div>

<div class="doc-paragraph">
	<h2>Database Abstraction Layer</h2>
	<?php echo Tag::classLink('Phalcon_Db') ?> is the component
	behind <?php echo Tag::classLink('Phalcon_Model_Base', 'Phalcon_Model') ?>
	that powers up all the models stuff in the framework. It consists of an independent high-level
	abstraction layer for database systems completely written in C.
</div>

<div class="doc-paragraph">
	This component allows doing a lower level database manipulation than using models.
	While the models do not need to use SQL, here you can use the specific SQL engine
	with you are working.
</div>

<div class="doc-paragraph highlightb">
	This guide is not intended to be a complete documentation of available methods and their arguments.
	Please visit the <?php echo Tag::classLink('Phalcon_Db', 'API documentation') ?> for a complete reference.
</div>

<div class="doc-paragraph">
	<h3><a name="adapters">Database Adapters</a></h3>
	This component makes use of adapters to encapsulate specific database system details. The following
	database engines are supported:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Name</th>
			<th>Description</th>
			<th>API</th>
		</tr>
		<tr>
			<td><a href="http://en.wikipedia.org/wiki/MySQL">MySQL</a></td>
			<td>Is the world's most used relational database management system (RDBMS) that runs as
				a server providing multi-user access to a number of databases</td>
			<td><?php echo Tag::classLink('Phalcon_Db_Adapter_Mysql') ?></td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="dialects">Database Dialects</a></h3>
	For some database engines, PHP provides several ways to connect to it. From PDO to native drivers,
	Phalcon encapsulate the specific details of each database engine in dialects. Those provide
	common functions and SQL generator to adapters.
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Name</th>
			<th>Description</th>
			<th>API</th>
		</tr>
		<tr>
			<td>MySQL</td>
			<td>SQL specific dialect for MySQL database system</td>
			<td><?php echo Tag::classLink('Phalcon_Db_Dialect_Mysql') ?></td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="connecting">Connecting to Databases</a></h3>
	All the connections created by the component are factored in a single method: Phalcon_Db::factory.
	Its first parameter is a supported adapter, the second is a standard PHP object with the connection
	settings, the third parameter tells if a
	<a href="http://php.net/manual/en/features.persistent-connections.php">persistent connection</a>
	should be created or not.
	The below example shows how to create a connection passing both required and optional parameters.
</div>
<!-- Both the MySQL server software itself and the client libraries use -->

<?php echo hyperlight('<?php

//Required
$config = new stdClass();
$config->host = "127.0.0.1";
$config->username = "mike";
$config->password = "sigma";
$config->name = "test_db";

//Optional
$config->charset = "utf8";
$config->collatio = "utf8_unicode_ci";
$config->compression = true;

//Create a connection
$connection = Phalcon_Db::factory("Mysql", $config, true);

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="pooling">Connection Pooling</a></h3>
	To control the creation of database connections through applications, a
	<a href="http://en.wikipedia.org/wiki/Connection_pool">connection pool</a> has been implemented
	in the framework. It caches each connection created to avoid making multiple connections
	to the same adapter/host/username.
</div>

<?php echo hyperlight('<?php

$config = array(
 "adapter" => "Mysql",
 "host" => "127.0.0.1",
 "username" => "mike",
 "password" => "sigma",
 "name" => "test_db"
);

//Set default connection settings
Phalcon_Db_Pool::setDefaultDescriptor($config);

//Create a connection
$connection = Phalcon_Db_Pool::getConnection();

//This is the same as the previous connection
$connection = Phalcon_Db_Pool::getConnection();

//Passing true as parameter will renew the pooled connection
$connection2 = Phalcon_Db_Pool::getConnection(true);

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="finding">Finding Rows</a></h3>
	Phalcon_Db provides several methods to query out rows from tables. Specific SQL of the target
	database engine is required in this case:
</div>

<?php echo hyperlight('<?php

$sql = "SELECT id,name FROM robots ORDER BY name";

//Send a SQL statement to the database system
$result = $connection->query($sql);

//Print each robot name
while($robot = $connection->fetchArray($result)){
   echo $robot["name"];
}

//Dump all rows in an array
$robots = $connection->fetchAll($sql);
foreach($robots as $robot){
   echo $robot["name"];
}

//Dump only the first row
$robot = $connection->fetchOne($sql);

', 'php'); ?>

<div class="doc-paragraph">
	By default it creates arrays with both associative and numeric indices. You can change this
	behavior by using Phalcon_Db::setFetchMode(). This method receives a constant
	telling which kind of index is required.
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Constant</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Phalcon_Db::DB_NUM</td>
			<td>Return an array with numeric indices</td>
		</tr>
		<tr>
			<td>Phalcon_Db::DB_ASSOC</td>
			<td>Return an array with associative indices</td>
		</tr>
		<tr>
			<td>Phalcon_Db::DB_BOTH</td>
			<td>Return an array with both associative and numeric indices</td>
		</tr>
	</table>
</div>

<?php echo hyperlight('<?php

$sql = "SELECT id,name FROM robots ORDER BY name";
$result = $connection->query($sql);

$connection->setFetchMode(Phalcon_Db::DB_NUM);
while($robot = $connection->fetchArray($result)){
   echo $robot[0];
}

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="ins-upd-del">Inserting/Updating/Deleting Rows</a></h3>
	When inserting, updating or deleting rows it's possible to send raw SQL statements or
	allow the component to take care of the SQL generation:
</div>

<?php echo hyperlight('<?php

//Inserting data with a raw SQL statement
$sql = "INSERT INTO `robots`(`name`, `year`) VALUES (\'Astro Boy\', 1952)";
$success = $connection->query($sql);

//Generating dynamically the necessary SQL
$success = $connection->insert(
   "robots",
   array("Astro Boy", 1952),
   array("name", "year")
);

//Updating data with a raw SQL statement
$sql = "UPDATE `robots` SET `name` = "Astro boy" WHERE `id` = 101";
$success = $connection->query($sql);

//Generating dynamically the necessary SQL
$success = $connection->update(
   "robots",
   array("name")
   array("New Astro Boy"),
   "id = 101"
);

//Deleting data with a raw SQL statement
$sql = "DELETE `robots` WHERE `id` = 101";
$success = $connection->query($sql);

//Generating dynamically the necessary SQL
$success = $connection->delete(
   "robots",
   "`id` = 101"
);

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="profiling">Profiling SQL Statements</a></h3>
	Phalcon_Db includes a profiling component to analyze the performance of database operations.
	With it you can diagnose performance problems and to discover bottlenecks.
</div>

<div class="doc-paragraph">
	With <?php echo Tag::classLink('Phalcon_Db_Profiler') ?>
	is straightforward to create database profiling:
</div>

<?php echo hyperlight('<?php

$profiler = new Phalcon_Db_Profiler();

//Set the connection profiler
$connection->setProfiler($profiler);

$sql = "SELECT buyer_name, quantity, product_name
FROM buyers LEFT JOIN products ON
buyers.pid=products.id";

//Execute a SQL statement
$connection->query($sql);

//Get the last profile in the profiler
$profile = $profiler->getLastProfile();

echo "SQL Statement: ", $profile->getSQLStatement(), "\n";
echo "Start Time: ", $profile->getInitialTime(), "\n";
echo "Final Time: ", $profile->getFinalTime(), "\n";
echo "Total Elapsed Time: ", $profile->getTotalElapsedSeconds(), "\n";

', 'php'); ?>

<div class="doc-paragraph">
	You can also create your own profile class based on Phalcon_Db_Profiler to
	get real time statistics of the statements sent to the database system:
</div>

<?php echo hyperlight('<?php

class DbProfiler extends Phalcon_Db_Profiler {

   /**
    * Executed before the SQL statement is sent to the db server
    */
   public function beforeStartProfile(Phalcon_Db_Profiler_Item $profile){
      echo $profile->getSQLStatement();
   }

   /**
    * Executed after the SQL statement is sent to the db server
    */
   public function afterEndProfile(Phalcon_Db_Profiler_Item $profile){
      echo $profile->getTotalElapsedSeconds();
   }

}

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="logging">Log SQL Statements</a></h3>
	When we use high-level abstraction components to access databases, we could find difficulties
	to understand which statements are finally sent to the database system. Phalcon_Db
	also provides logging capabilities to track all the SQL statements sent to the database.
</div>

<div class="doc-paragraph">
	The <?php echo Tag::classLink('Phalcon_Logger') ?> is a ready-to-use component
	that perfectly fits with the logging behavior implemented in Phalcon_Db. Also you can write
	your own logging system.
</div>

<?php echo hyperlight('<?php

$logger = new Phalcon_Logger("File", "app/logs/db.log");

$connection->setLogger($logger);

$connection->insert(
  "products",
  array("Hot pepper", 3.50),
  array("name", "price")
);

', 'php'); ?>

<div class="doc-paragraph">
	As above, the file <i>app/logs/db.log</i> might contain the following:
</div>

<?php echo hyperlight('[Sun, 29 Apr 12 22:35:26 -0500][DEBUG][Resource Id #77] INSERT INTO products (name, price) VALUES (\'Hot pepper\', 3.50)', 'php') ?>

<div class="doc-paragraph">
	<h4>Implementing your own Logger</h4>
	You can pass to Phalcon_Db::setLogger any object that have a method called "log" that accepts
	a string as its first argument.
	That method will be called out each time a SQL statement will sent to the database system.
</div>

<div class="doc-paragraph">
	<h3><a name="describing">Describing Tables and Databases</a></h3>
	Phalcon_Db also allows getting detailed information about tables and databases.
</div>

<?php echo hyperlight('<?php

//Get tables on the test_db database
$tables = $connection->listTables("test_db");

//Is there a table robots in the database?
$exists = $connection->tableExists("robots");

//Get name, data types and special features of robots fields
$fields = $connection->describeTable("robots");
foreach($fields as $field){
   echo "Column Type: ", $field["Type"];
}

//Get indexes on the robots table
$indexes = $connection->describeIndexes("robots");
foreach($indexes as $index){
  print_r($index->getColumns());
}

//Get foreign keys on the robots table
$references = $connection->describeReferences("robots");
foreach($references as $reference){
  //Print referenced columns
  print_r($reference->getReferencedColumns());
}

', 'php'); ?>

<div class="doc-paragraph">
	A table description is very similar to the MySQL describe command, it contains the following info:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Index</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Field</td>
			<td>Field's name</td>
		</tr>
		<tr>
			<td>Type</td>
			<td>Column Type</td>
		</tr>
		<tr>
			<td>Key</td>
			<td>Is the column part of the primary key or an index?</td>
		</tr>
		<tr>
			<td>Null</td>
			<td>Do column allow null values?</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="altering">Creating/Altering/Dropping Tables</a></h3>
	SQL specifications and implementations include data manipulation instructions
	such as ALTER or DROP. Although, these implementations tend to change from one
	database system to another. Phalcon_Db provides an easy way to alter tables
	in a unified manner.
</div>

<div class="doc-paragraph">
	<h4>Creating Tables</h3>
	The following example shows how to create a table using this component:
</div>

<?php echo hyperlight('<?php

use Phalcon_Db_Column as Column;

$connection->createTable("robots", null, array(
   "columns" => array(
     new Column("id", array(
       "type" => Column::TYPE_INTEGER,
       "size" => 10,
       "notNull" => true,
       "autoIncrement" => true
     )),
     new Column("name", array(
       "type" => Column::TYPE_VARCHAR,
       "size" => 70,
       "notNull" => true
     )),
     new Column("year", array(
       "type" => Column::TYPE_INTEGER,
       "size" => 11,
       "notNull" => true
     ))
   )
));', 'php'); ?>


<div class="doc-paragraph">
	Phalcon_Db::createTable accepts an associative array describing the table.
	Columns are defined with the class <?php echo Tag::classLink('Phalcon_Db_Column') ?>.
	It also provides general defining capabilities to alter and modify columns, not only create tables.
	The following options are available when describing columns:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Option</th>
			<th>Description</th>
			<th>Optional</th>
		</tr>
		<tr>
			<td>"type"</td>
			<td>Column type. Must be a Phalcon_Db_Column constant, below you will find a list of them.</td>
			<td>No</td>
		</tr>
		<tr>
			<td>"size"</td>
			<td>Some type of columns like VARCHAR or INTEGER may have a specific size</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"scale"</td>
			<td>DECIMAL or NUMBER columns may be have a scale to specify how much decimals it must store</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"unsigned"</td>
			<td>INTEGER columns may be signed or unsigned. This option does not apply to other types of columns</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"notNull"</td>
			<td>Column can store null values?</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"autoIncrement"</td>
			<td>With this attribute column will filled automatically with an auto-increment integer.
			Only one column in the table can have this attribute.</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"first"</td>
			<td>Column must be placed at first position in the column order</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"after"</td>
			<td>Column must be placed after indicated column</td>
			<td>Yes</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	Phalcon_Db supports the following database column types:
	<ul>
		<li>Phalcon_Db_Column::TYPE_INTEGER</li>
		<li>Phalcon_Db_Column::TYPE_DATE</li>
		<li>Phalcon_Db_Column::TYPE_VARCHAR</li>
		<li>Phalcon_Db_Column::TYPE_DECIMAL</li>
		<li>Phalcon_Db_Column::TYPE_DATETIME</li>
		<li>Phalcon_Db_Column::TYPE_CHAR</li>
		<li>Phalcon_Db_Column::TYPE_TEXT</li>
	</ul>
</div>

<div class="doc-paragraph">
Associative hash passed to Phalcon_Db::createTable can have the possible sections:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Index</th>
			<th>Description</th>
			<th>Optional</th>
		</tr>
		<tr>
			<td>"columns"</td>
			<td>An array with a set of table columns defined with <?php echo Tag::classLink('Phalcon_Db_Column') ?></td>
			<td>No</td>
		</tr>
		<tr>
			<td>"indexes"</td>
			<td>An array with a set of table indexes defined with <?php echo Tag::classLink('Phalcon_Db_Index') ?>.</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"references"</td>
			<td>An array with a set of table references (foreign keys) defined with <?php echo Tag::classLink('Phalcon_Db_Reference') ?>.</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"options"</td>
			<td>An array with a set of table creation options.
			This options often is only related to the database system
			in which the migration was generated.</td>
			<td>Yes</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h4>Altering Tables</h3>
	The reason for altering a table can be: add, change or delete fields. Not all database systems
	allow to modify existing columns or add columns between another two. So, Phalcon_Db is limited by these
	constraints.
</div>

<?php echo hyperlight('<?php

use Phalcon_Db_Column as Column;

//Adding a new column
$connection->addColumn("robots", null, new Column("robot_type", array(
  "type" => Column::TYPE_VARCHAR,
  "size" => 32,
  "notNull" => true,
  "after" => "name"
));

//Modifying an existing one
$connection->modifyColumn("robots", null, new Column("name", array(
  "type" => Column::TYPE_VARCHAR,
  "size" => 40,
  "notNull" => true
));

//Deleting the column "name"
$connection->deleteColumn("robots", null, "name");

', 'php'); ?>

<div class="doc-paragraph">
	<h4>Dropping Tables</h3>
	Examples on dropping tables:
</div>

<?php echo hyperlight('<?php

//Drop table robot from active database
$connection->dropTable("robots");

//Drop table robot from database "machines"
$connection->dropTable("robots", "machines");

', 'php'); ?>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/intl', 'â Internationalization') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/logging', 'Logging â') ?>
			</td>
		</tr>
	</table>
</div>
