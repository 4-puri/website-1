
<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Debugging Applications</h2>
	PHP language provides us facilities to debug applications, thanks to notices, warnings, errors and exceptions
	we can know where a problem is exactly generated: file, line, message, numeric code, backtrace, etc.
	With this information we could edit the file and fix the problem. OOP frameworks for PHP like Phalcon,
	mainly uses exceptions to encapsulate the details of an error. Exceptions generated by Phalcon
	are based on the standard PHP's <a href="http://www.php.net/manual/en/language.exceptions.php">Exception class</a>.
</div>

<div class="doc-paragraph">
	Despite being written in C, Phalcon runs methods in the PHP userland, this provides the same debug facilities that
	any program made​in PHP has. In this section of the documentation, we'll talk about debugging applications
	with Phalcon.
</div>

<div class="doc-paragraph">
	<h3>Catching Exceptions</h3>
	Through all the tutorials and examples of the framework, there is a common element that is catching exceptions.
	This is usually done with a block try/catch:
</div>

<?php echo hyperlight('<?php

try {

 //... some phalcon code

} catch(Phalcon_Exception $e) {

}', 'php'); ?>

<div class="doc-paragraph">
	Any exception thrown within the block is captured in the variable $e. A Phalcon_Exception
	has nothing different with respect to a PHP exception, but allows us to know which are generated
	by the framework.
</div>

<div class="doc-paragraph">
	Any exceptions generated by PHP are based on the Exception class, and have at least the following elements:
</div>

<?php echo hyperlight('<?php

class Exception
{

  /* Properties */
  protected string $message;
  protected int $code;
  protected string $file;
  protected int $line;

  /* Methods */
  public __construct ([ string $message = "" [, int $code = 0 [, Exception $previous = NULL ]]])
  final public string getMessage ( void )
  final public Exception getPrevious ( void )
  final public mixed getCode ( void )
  final public string getFile ( void )
  final public int getLine ( void )
  final public array getTrace ( void )
  final public string getTraceAsString ( void )
  public string __toString ( void )
  final private void __clone ( void )

}

', 'php'); ?>

<div class="doc-paragraph">
	In the same way we get information from one exception, it is easy to see where an exception has been generated by Phalcon.
	For example, by printing additional information from the information in the following way:
</div>

<?php echo hyperlight('<?php

try {

  //... app code ...

} catch(Phalcon_Exception $e){
   echo get_class($e), ": ", $e->getMessage(), "\n"
   echo " File=", $e->getFile(), "\n";
   echo " Line=", $e->getLine(), "\n";
   echo $e->getTraceAsString();
}

', 'php'); ?>

<div class="doc-paragraph">
	It's easy to know which file and line of your code the exception occurred. Besides this, which components are involved in generating the exception.
</div>

<?php echo hyperlight("

Warning: mysqli_real_connect(): (28000/1045): Access denied for user 'test'@'localhost'
(using password: YES)  in /var/www/test/app/controllers/SignupController.php on line 15

Phalcon_Db_Exception: Connection to MySQL failed
File=/var/www/test/app/controllers/SignupController.php
Line=15
#0 [internal function]: Phalcon_Db_Adapter_Mysql->connect(Object(Phalcon_Config))
#1 [internal function]: Phalcon_Db_Adapter_Mysql->__construct(Object(Phalcon_Config))
#2 [internal function]: Phalcon_Db::factory('Mysql', Object(Phalcon_Config))
#3 [internal function]: Phalcon_Db_Pool::getConnection()
#4 [internal function]: Phalcon_Model_Manager->getConnection()
#5 [internal function]: Phalcon_Model_Manager->load('Users')
#6 [internal function]: Phalcon_Model_Manager->isModel('Users')
#7 [internal function]: Phalcon_Model_Manager->autoload('Users')
#8 /var/www/test/app/controllers/SignupController.php(15): spl_autoload_call('Users')
#9 [internal function]: SignupController->registerAction('')
#10 [internal function]: call_user_func_array(Array, Array)
#11 [internal function]: Phalcon_Dispatcher->dispatch(Object(Phalcon_Request),
 Object(Phalcon_Response), Object(Phalcon_View), Object(Phalcon_Model_Manager))
#12 /var/www/test/public/index.php(22): Phalcon_Controller_Front->dispatchLoop()
#13 {main}
", 'php'); ?>

<div class="doc-paragraph">
	As you can see from the previous output the Phalcon's classes and methods are
	displayed as normal in PHP, even show the parameters that have received each of them.
	The method <a href="http://www.php.net/manual/en/exception.gettrace.php">Exception::getTrace</a>
	even gives you much more information.
</div>

<div class="doc-paragraph">
	<h3>Using XDebug</h3>
	<a href="http://xdebug.org/">XDebug</a> is an incredible tool that complements the debug PHP applications.
	It is also a C extension for PHP, and you can use it together with Phalcon to debug.
</div>

<div class="doc-paragraph">
	Once you have xdebug installed, you can use its API to get more complete information:
</div>

<?php echo hyperlight('<?php

<?php

class SignupController extends Phalcon_Controller
{

        function indexAction()
        {

        }

        function registerAction()
        {

                //Request variables from html form
                $name = $this->request->getPost("name", "string");
                $email = $this->request->getPost("email", "email");

                //Stop execution and show a backtrace
                return xdebug_print_function_stack("stop here!");

                $user = new Users();
                $user->name = $name;
                $user->email = $email;

                //Store and check for errors
                $user->save();
        }

}
', 'php'); ?>

<div class="doc-paragraph">
	Xdebug could also show us the variables in the local scope, and a backtrace as well:
</div>

<?php echo hyperlight("
Xdebug: stop here! in /var/www/test/app/controllers/SignupController.php on line 15

Call Stack:
    0.0005     640344   1. {main}() /var/www/test/public/index.php:0
    0.0014     645952   2. Phalcon_Controller_Front->dispatchLoop()
 /var/www/test/public/index.php:26
    0.0044     709504   3. SignupController->registerAction('')
 /var/www/test/public/index.php:0
    0.0046     710224   4. xdebug_print_function_stack('stop here!')
 /var/www/test/app/controllers/SignupController.php:15


Variables in local scope (#3):
  \$email = 'thecure@hotmail.com'
  \$name = 'robert smith'
  \$user = *uninitialized*
", 'php'); ?>

<div class="doc-paragraph">
	Xdebug provides several ways to get debug information and trace the execution of
	your applications using Phalcon. Check out its <a href="http://xdebug.org/docs">documentation</a>
	to get more info
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/migrations', '← Database Migrations') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/tools', 'Using Developer Tools →') ?>
			</td>
		</tr>
	</table>
</div>
