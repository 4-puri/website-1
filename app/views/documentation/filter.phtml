
<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Filtering and Sanitizing</h2>
	Sanitizing user input is a critical part of secure software development,
	Neglecting to sanitize user input that may subsequently be passed to system-level functions
	could allow attackers to do massive internal damage to the information store and operating system,
	deface or delete Web files, and otherwise gain unrestricted access to the server.
</div>

<div class="doc-paragraph" align="center">
	<?php echo Phalcon_Tag::image('img/sql.png') ?>
	<div align="right">
		<em>
			<a href="http://xkcd.com/327/">Full image</a> (from xkcd)
		</em>
	</div>
</div>

<div class="doc-paragraph">
	The <?php echo Tag::classLink('Phalcon_Filter') ?> component provides a set of commonly needed data filters and sanitizes helpers.
	It provides object-oriented wrappers for the mature PHP filter extension.
</div>

<div class="doc-paragraph">
	<h3><a name="sanitizing">Sanitizing data</a></h3>
	Sanitize is the process to remove the characters that are not required from a certain value.
	This lets us know that the values will not have unexpected values damaging the integrity of applications.
</div>

<?php echo hyperlight('<?php

$filter = new Phalcon_Filter();

// returns "someone@example.com"
$filter->sanitize("some(one)@exa\\mple.com", "email");

// returns "hello"
$filter->sanitize("hello<<", "string");

// returns "!100a019"
$filter->sanitize("!100a019", "int");

// returns "100019.01"
$filter->sanitize("!100a019.01a", "float");

', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="controllers">Sanitizing from Controllers</a></h3>
	You can access a Phalcon_Filter object from the controllers also when accessing POST or GET input data.
	First parameter is the name of the variable to be obtained; the second is the filter to be applied.
</div>

<?php echo hyperlight('<?php

class ProductsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function saveAction()
  {

    //Sanitizing price from input
    $price = $this->request->getPost("price", "double");

    //Sanitizing email from input
    $email = $this->request->getPost("customerEmail", "email");

  }

}', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="filtering-parameters">Filtering Action Parameters</a></h3>
	The next example shows you how to sanitize the action parameters within a controller action:
</div>

<?php echo hyperlight('<?php

class ProductsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function showAction($productId)
  {
    $productId = $this->filter->sanitize($productId, "int");
  }

}', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="filtering">Filtering data</a></h3>
	Additional to sanitizing, this component provides filtering. Filtering process
	also removes or modifies input data to adjust it to the format we expect.
</div>

<?php echo hyperlight('<?php

$filter = new Phalcon_Filter();

// returns "Hello"
$filter->filter("<h1>Hello</h1>", "striptags");

// returns "Hello"
$filter->filter("  Hello   ", "extraspaces");

', 'php'); ?>

<div class="doc-paragraph">
	<h3>Complex Sanitizing and Filtering</h3>
	PHP itself provides an excellent filter extension you can use. Check out its documentation:
	<a href="http://www.php.net/manual/en/book.filter.php">Data Filtering at PHP Documentation</a>
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/routing', '← Routing') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/config', 'Reading Configurations →') ?>
			</td>
		</tr>
	</table>
</div>
