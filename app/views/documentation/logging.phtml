<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Logging</h2>
	<?php echo Tag::classLink('Phalcon_Logger') ?> is a component whose purpose is to provide logging services
	to applications using different backends via adapters, generating options, formats and filters
	also implementing transactions. You could use loggers to debug processes, trace or access information
	and more.
</div>

<div class="doc-paragraph">
	<h3><a name="adapters">Adapters</a></h3>
	This component makes use of backend adapters to encapsulate the details of each of them:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Adapter</th>
			<th>Description</th>
			<th>API</th>
		</tr>
		<tr>
			<td>File</td>
			<td>Logs to a plain text file</td>
			<td><?php echo Tag::classLink('Phalcon_Logger_Adapter_File') ?></td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="creating">Creating a Log</a></h3>
	The below example shows how to create a log and add messages to it:
</div>

<?php echo hyperlight('
$logger = new Phalcon_Logger("File", "app/logs/test.log");
$logger->log("This is a message");
$logger->log("This is an error", Phalcon_Logger::ERROR);
$logger->error("This is another error");
$logger->close();
', 'iphp'); ?>

<div class="doc-paragraph">
	Now, It simply produces the following log:
</div>

<?php echo hyperlight('
[Tue, 17 Apr 12 22:09:02 -0500][DEBUG] This is a message
[Tue, 17 Apr 12 22:09:02 -0500][ERROR] This is an error
[Tue, 17 Apr 12 22:09:02 -0500][ERROR] This is another error
', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="transactions">Transactions</a></h3>
	Because write to the filesystem could be expensive in terms of performance,
	you can take advantage of logging transactions to temporary store messages
	in memory and later write them to disk in a single atomic operation.
</div>

<?php echo hyperlight('

//Create the logger
$logger = new Phalcon_Logger("File", "app/logs/test.log");

//Start a transaction
$logger->begin();

//Add messages
$logger->alert("This is an alert");
$logger->error("This is another error");

//Commit messages to file
$logger->commit();

$logger->close();
', 'iphp'); ?>

<div class="doc-paragraph">
	<h3><a name="format">Message Formatting</a></h3>
	By default the logger uses the following format: [%date%][%type%] %message%.
	Phalcon_Logger allows you to define your own message format by using the method setFormat().
</div>

<div class="doc-paragraph">
	Formats can contain variables that are replaced by their respective values according to the following table:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Variable</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>%message%</td>
			<td>The message itself expected to be logged</td>
		</tr>
		<tr>
			<td>%date%</td>
			<td>Date the message was added</td>
		</tr>
		<tr>
			<td>%type%</td>
			<td>Uppercase string with message type</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	This example shows how to define another format:
</div>

<?php echo hyperlight('

//Changing the logger format
$logger->setFormat("%date% - %message%");

', 'iphp'); ?>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/acl', '← Access Control Lists (ACL)') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/db', 'Database Abstraction Layer →') ?>
			</td>
		</tr>
	</table>
</div>