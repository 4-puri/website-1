<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Database Migrations</h2>
	Migrations are a convenient way for you to alter your database in a structured and organized manner.
</div>

<div class="doc-paragraph highlightb">
	<b>Important:</b> Migrations are available on <?php echo Phalcon_Tag::linkTo('documentation/tools', 'Phalcon Developer Tools.') ?>
	You need at least Phalcon Framework version 0.3.5 to use developer tools.
	Also is recommended to have installed PHP 5.3.6 as minimum.
</div>

<div class="doc-paragraph">
	Often in development we need to update changes in production environments. Some of these changes
	could be database modifications like new fields, new tables, removing indexes, etc.
</div>

<div class="doc-paragraph">
	When a migration is generated a set of classes are created to describe how your
	database is structured at that moment.
	These classes can be used  to synchronize the schema structure on remote databases
	leaving your application ready to work. As expected, migrations allow you to describe these
	transformations using plain PHP giving you the most powerful way to work.
</div>

<div class="doc-paragraph">
</div>

<iframe src="http://player.vimeo.com/video/41381817" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

<div class="doc-paragraph">
	<h3><a name="dumping">Schema Dumping</a></h3>
	Developer Tools provides you scripts to manage migrations (generation, running and rollback).
	First script allows generation; its available options are below:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon_Tag::image(array('img/migrations-1.png', 'width' => '550')) ?>
</div>

<div class="doc-paragraph">
	Running that script without extra parameters simply will dump every object (tables and views)
	in your database as migration classes.
</div>

<div class="doc-paragraph">
	Each migration has a version identifier associated; that version allows us to identify if migration
	is newer or older. Also versions will tell to Phalcon the running order when synchronizing a
	database schema to the most recent.
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon_Tag::image(array('img/migrations-2.png', 'width' => '550')) ?>
</div>

<div class="doc-paragraph">
	When generating a migration, it displays the instructions used to describe different
	aspects of the database and their execution times. Finally, a version of migration is generated.
</div>

<div class="doc-paragraph">
	By default Phalcon Developer Tools use the <i>app/migrations</i> directory to dump the
	migrations, you can change it using a script option.
	Each table in the database has its respective class generated in a separated file under
	a directory referring its version:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon_Tag::image(array('img/migrations-3.png', 'width' => '550')) ?>
</div>

<div class="doc-paragraph">
	<h3><a name="anatomy">Migration Class Anatomy</a></h3>
	Each file contains a unique class that extends from Phalcon_Model_Migration.
	These classes normally have two methods: "up" and "down". First,
	perform the required transformations, another method revert them.
</div>

<div class="doc-paragraph">
	Usually "up" contains the "magic" method morphTable. The magic comes when it
	recognizes  what changes are needed to synchronize the actual table
	in the database to the description given.
</div>

<?php echo hyperlight('<?php

use Phalcon_Db_Column as Column;
use Phalcon_Db_Index as Index;
use Phalcon_Db_Reference as Reference;

class ProductsMigration_100 extends Phalcon_Model_Migration {

  public function up(){
    $this->morphTable("products", array(
      "columns" => array(
        new Column("id", array(
          "type" => Column::TYPE_INTEGER,
          "size" => 10,
          "unsigned" => true,
          "notNull" => true,
          "autoIncrement" => true,
          "first" => true
        )),
        new Column("product_types_id", array(
          "type" => Column::TYPE_INTEGER,
          "size" => 10,
          "unsigned" => true,
          "notNull" => true,
          "after" => "id"
        )),
        new Column("name", array(
          "type" => Column::TYPE_VARCHAR,
          "size" => 70,
          "notNull" => true,
          "after" => "product_types_id"
        )),
        new Column("price", array(
          "type" => Column::TYPE_DECIMAL,
          "size" => 16,
          "scale" => 2,
          "notNull" => true,
          "after" => "name"
        )),
      ),
      "indexes" => array(
        new Index("PRIMARY", array(
          "id"
        )),
        new Index("product_types_id", array(
          "product_types_id"
        ))
      ),
      "references" => array(
        new Reference("products_ibfk_1", array(
          "referencedSchema" => "invo",
          "referencedTable" => "product_types",
          "columns" => array("product_types_id"),
          "referencedColumns" => array("id")
        ))
      ),
      "options" => array(
        "TABLE_TYPE" => "BASE TABLE",
        "ENGINE" => "InnoDB",
        "TABLE_COLLATION" => "utf8_general_ci"
      )
    ));
  }

}', 'php') ?>

<div class="doc-paragraph">
The class is called "ProductsMigration_100". Suffix 100 refers to the version 1.0.0. Morph table
receive an associative array with 4 possible sections:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Index</th>
			<th>Description</th>
			<th>Optional</th>
		</tr>
		<tr>
			<td>"columns"</td>
			<td>An array with a set of table columns</td>
			<td>No</td>
		</tr>
		<tr>
			<td>"indexes"</td>
			<td>An array with a set of table indexes.</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"references"</td>
			<td>An array with a set of table references (foreign keys).</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"options"</td>
			<td>An array with a set of table creation options.
			This options often is only related to the database system
			in which the migration was generated.</td>
			<td>Yes</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h4>Defining Columns</h4>
	Class <?php echo Tag::classLink('Phalcon_Db_Column') ?> is used to define table columns.
	It encapsulates the correct definition of a wide of column related features. Its constructor
	receives as first parameter the column name and an array describing the column. The following
	options are available when describing columns:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Option</th>
			<th>Description</th>
			<th>Optional</th>
		</tr>
		<tr>
			<td>"type"</td>
			<td>Column type. Must be a Phalcon_Db_Column constant, below you will find a list of them.</td>
			<td>No</td>
		</tr>
		<tr>
			<td>"size"</td>
			<td>Some type of columns like VARCHAR or INTEGER may have a specific size</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"scale"</td>
			<td>DECIMAL or NUMBER columns may be have a scale to specify how much decimals it must store</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"unsigned"</td>
			<td>INTEGER columns may be signed or unsigned. This option does not apply to other types of columns</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"notNull"</td>
			<td>Column can store null values?</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"autoIncrement"</td>
			<td>With this attribute column will filled automatically with an auto-increment integer.
			Only one column in the table can have this attribute.</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"first"</td>
			<td>Column must be placed at first position in the column order</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>"after"</td>
			<td>Column must be placed after indicated column</td>
			<td>Yes</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	Database migrations supports the following database column types:
	<ul>
		<li>Phalcon_Db_Column::TYPE_INTEGER</li>
		<li>Phalcon_Db_Column::TYPE_DATE</li>
		<li>Phalcon_Db_Column::TYPE_VARCHAR</li>
		<li>Phalcon_Db_Column::TYPE_DECIMAL</li>
		<li>Phalcon_Db_Column::TYPE_DATETIME</li>
		<li>Phalcon_Db_Column::TYPE_CHAR</li>
		<li>Phalcon_Db_Column::TYPE_TEXT</li>
	</ul>
</div>

<div class="doc-paragraph">
	<h4>Defining Indexes</h4>
	Class <?php echo Tag::classLink('Phalcon_Db_Index') ?> allows defining table indexes.
	An index only requires that you define a name for it and a list of columns. There is
	a special case for indexes. If any index has the name PRIMARY, Phalcon will understand
	which that is the table primary key.
</div>

<div class="doc-paragraph">
	<h4>Defining References</h4>
	Class <?php echo Tag::classLink('Phalcon_Db_Reference') ?> allows us to define table references (also called
	foreign keys). The following options can be used to define a reference:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Index</th>
			<th>Description</th>
			<th>Optional</th>
		</tr>
		<tr>
			<td>"referencedTable"</td>
			<td>It's auto-descriptive. It refers to the name of the referenced table.</td>
			<td>No</td>
		</tr>
		<tr>
			<td>"columns"</td>
			<td>An array with the name of the columns at the table that have the reference</td>
			<td>No</td>
		</tr>
		<tr>
			<td>"referencedColumns"</td>
			<td>An array with the name of the columns at the referenced table</td>
			<td>No</td>
		</tr>
		<tr>
			<td>"referencedTable"</td>
			<td>The referenced table maybe is on another schema or database. This option
			allows you to define that.</td>
			<td>Yes</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="writing">Writing Migrations</a></h3>
	Migrations aren't only designed to "morph" table. A migration is just a regular PHP class so you’re not
	limited to these functions. For example after adding a column you could write code to set the value
	of that column for existing records. For more details and examples of individual methods, check the
	<?php echo Phalcon_Tag::linkTo('documentation/db', 'database component') ?>.
</div>

<?php echo hyperlight('<?php

class ProductsMigration_100 extends Phalcon_Model_Migration {

  public function up(){
    //...
    self::$_connection->insert(
       "products",
       array("Malabar spinach", 14.50),
       array("name", "price")
    );
  }

}', 'php') ?>

<div class="doc-paragraph">
	<h3><a name="running">Running Migrations</a></h3>
	Once you have the generated migrations on the remote server is easy to synchronize up
	these changes. The following example shows you how doing that:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon_Tag::image(array('img/migrations-4.png', 'width' => '550')) ?>
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon_Tag::image(array('img/migrations-5.png', 'width' => '550')) ?>
</div>

<div class="doc-paragraph">
Depending on how outdated is the database with respect to migration, Phalcon may run multiple migration versions
in the same process migration.
</div>

<div class="doc-paragraph">
If you specify a target version, Phalcon will run the required migrations
until it has reached the specified version.
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/loader', '← Universal Class Loader') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/tools', 'Using Developer Tools →') ?>
			</td>
		</tr>
	</table>
</div>
