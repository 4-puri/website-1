
<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Routing</h2>
	A router recognizes a URI and decompose it into parameters to determine which controller, and
 	action of that controller should receive the request.
</div>

<div class="doc-paragraph">
	<h3><a name="default">Default Behavior</a></h3>
	Phalcon uses by default the <?php echo Tag::classLink('Phalcon_Router_Rewrite') ?> router.
	When a <?php echo Tag::classLink('Phalcon_Controller_Front') ?> is used as bootstrap,
	a router of this kind is automatically instantiated inside it.
</div>

<div class="doc-paragraph">
	Router_Rewrite is a very simple router that always expects a URI that match the following pattern:
	/:controller/:action/:params. For example, for a URL like this <i>http://phalconphp.com/documentation/show/about.html</i>,
	this router will decompose it as follows:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<td align="right"><b>Controller</b></td>
			<td>documentation</td>
		</tr>
		<tr>
			<td align="right"><b>Action</b></td>
			<td>show</td>
		</tr>
		<tr>
			<td align="right"><b>Parameter</b></td>
			<td>about.html</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
The routing URI is always taken from the $_GET['_url'] variable that is created by the rewrite engine module.
A couple of rewrite rules that work fine with Phalcon are:
</div>

<?php echo hyperlight('
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.php?_url=$1 [QSA,L]
', 'iphp'); ?>

<div class="doc-paragraph">
	Also, it's possible to replace this behavior by setting directly this value to Phalcon_Router_Rewrite:
</div>


<?php echo hyperlight('<?php

//Creating a router
$router = new Phalcon_Router_Rewrite();

//Taking URI from $_GET["_url"]
$router->handle();

//or Setting the URI value directly
$router->handle("/doc/a/v");

//Getting the processed controller
echo $router->getControllerName();
', 'php'); ?>

<div class="doc-paragraph">
	This router is faster and simpler, it will provide you the lower overhead recognizing uris in your
	applications.
</div>

<div class="doc-paragraph">
	<h3><a name="advanced">Advanced Routing</a></h3>
	Phalcon provides advanced routing capabilities by replacing the default router by a
	<?php echo Tag::classLink('Phalcon_Router_Regex') ?> router.
</div>

<div class="doc-paragraph">
	When Phalcon_Router_Regex is used together with Apache, it's necessary to prepend a slash / to the
	beginning of the rewrite subexpression ($1) to handle correctly the URIs:
</div>

<?php echo hyperlight('
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.php?_url=/$1 [QSA,L]
', 'iphp'); ?>

<div class="doc-paragraph">
	This router allow you to add many routes as you need. A route is defined in the following way:
</div>

<?php echo hyperlight('<?php

//Creating a router
$router = new Phalcon_Router_Regex();

$router->add("/admin/:controller/a/:action/:params", array(
    "controller" => 1,
    "action" => 2,
    "params" => 3,
));

', 'php'); ?>

<div class="doc-paragraph">
	The method add() receives a pattern that could have predefined placeholders and regular expression
	modifiers. All the routing patterns must start with a slash (/). Additionally, it is not necessary to add
	regular expression delimiters. All routes patterns are case-insensitive.
</div>

<div class="doc-paragraph">
	The second parameter define how the matches parts should be binded to the controller/action/parameters.
	Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the above
	example, the first subpattern matched (:controller) is the controller part of the route, the second the action
	and so on.
</div>

<div class="doc-paragraph">
	The placeholders help writing regular expressions that are more readable. The following placeholders
	are supported by default:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Placeholder</th>
			<th>Regular Expression</th>
			<th>Usage</th>
		</tr>
		<tr>
			<td>/:controller</td>
			<td>/([a-zA-Z0-9\_]+)</td>
			<td>Match a valid controller name with alpha-numeric characters only</td>
		</tr>
		<tr>
			<td>/:action</td>
			<td>/([a-zA-Z0-9\_]+)</td>
			<td>Match a valid action name with alpha-numeric characters only</td>
		</tr>
		<tr>
			<td>/:params</td>
			<td>(/.*)*</td>
			<td>Match a list of optional words separated by slashes</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	You can add many routes as you need using add(), the order in which you add the routes indicate its relevance.
	Internally all defined routes are traversed until Router_Regex finds one that matches the given uri and then
	the others will be discarded.
</div>

<div class="doc-paragraph">
	By default, if a route does not match any defined route, a fallback route will be tried: ^/:controller/:action/:params$
	giving to the router a similar behavior as Router_Rewrite.
</div>

<div class="doc-paragraph">
	In addition to the standard routes parts (controller/action/params), with Router_Regex is possible to define
	parameters based on the routes patterns. The below example shows how to give names to some of the parameters
	of the route:
</div>

<?php echo hyperlight('
$router->add("/news/([0-9]{4})/([0-9]{2})/([0-9]{2})/:params", array(
	"controller" => "posts",
	"action" => "show",
	"year" => 1,
	"month" => 2,
	"day" => 3,
	"params" => 4,
));
', 'iphp'); ?>

<div class="doc-paragraph">
	As you can see, the route doesn't define a "controller" or "action" part. Then, we are setting these
	parts with fixed values ("posts" and "show"). The user will not know the controller that is
	really dispatched by the request. Inside the controller, those named-params could be easily accesed as follows:
</div>

<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller
{

  function indexAction()
  {

  }

  function showAction()
  {

    //Return "year" parameter
    $year = $this->_getParam("year");

    //Return "month" parameter
    $month = $this->_getParam("month");

    //Return "day" parameter
    $day = $this->_getParam("day");

  }

}', 'php'); ?>

<div class="doc-paragraph">
	The following are more examples of custom routes:
</div>

<?php echo hyperlight('

//matches "/system/admin/a/edit/7001"
$router->add("/system/:controller/a/:action/:params", array(
    "controller" => 1,
    "action" => 2,
    "params" => 3,
));

//matches "/es/news"
$router->add("/([a-z]{2})/:controller", array(
    "controller" => 2,
    "action" => "index",
    "language" => 1
));

//matches "/admin/posts/edit/100"
$router->add("/admin/:controller/:action/:int", array(
    "controller" => 1,
    "action" => 2,
    "id" => 3
));

//matches "/posts/2010/02/some-cool-content"
$router->add("/posts/([0-9]{4})/([0-9]{2})/([a-z\-]+)", array(
    "controller" => "posts",
    "action" => "show",
    "year" => 1,
    "month" => 2,
    "title" => 4,
));

//matches "/manual/en/translate.adapter.html"
$router->add("/manual/([a-z]{2})/([a-z\.]+)\.html", array(
    "controller" => "manual",
    "action" => "show",
    "language" => 1,
    "file" => 2
));

', 'iphp'); ?>


<div class="doc-paragraph">
	<h3><a name="advanced">Replacing Controller Front Router</a></h3>
	If you are using the <?php echo Tag::classLink('Phalcon_Controller_Front') ?> to orquest
	the MVC control flow, you could replace the default router to define custom routes
	or alter its standard behavior:
</div>

<?php echo hyperlight('<?php

try {

    $front = Phalcon_Controller_Front::getInstance();

    $router = new Phalcon_Router_Regex();

    $router->add("/login", array(
        "controller" => "users",
        "action" => "login"
    ));

    $router->add("/profile", array(
        "controller" => "users",
        "action" => "profile"
    ));

    $router->handle();

    $front->setRouter($router);

    $config = new Phalcon_Config_Adapter_Ini("/../app/config/config.ini");
    $front->setConfig($config);

    echo $front->dispatchLoop()->getContent();

} catch(Phalcon_Exception $e) {
    echo "PhalconException: ", $e->getMessage();
}', 'iphp'); ?>

<div class="doc-paragraph">
	Also, to organize better your routes code could be placed in an external file to
	include in the bootstrap.
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/tags', '← View Helpers') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/dispatching', 'Orchestrating MVC →') ?>
			</td>
		</tr>
	</table>
</div>
