
<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> Â» Documentation
</div>

<div class="doc-paragraph">
	<h2>View Helpers</h2>
	HTML markup can quickly become tedious to write and maintain because of control naming and their numerous
	attributes. Phalcon deals away with these complexities by providing view helpers for generating HTML markup.
</div>

<div class="doc-paragraph highlightb">
	This guide is not intended to be a complete documentation of available helpers and their arguments.
	Please visit the <?php echo Tag::classLink('Phalcon_Tag', 'api') ?> documentation for a complete reference.
</div>

<div class="doc-paragraph">
	<h3><a name="aliasing">Using Name Aliasing</a></h3>
	You could use name aliasing to get short names for classes. In this case, a Tag name can be used to alias the
	class Phalcon_Tag.

	<?php echo hyperlight('<?php use Phalcon_Tag as Tag; ?>', 'php'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="forms">Creating Forms</a></h3>
	Forms in web applications are an essential interface for user input. The following example
	shows how to implement a simple search form using view helpers:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php use Phalcon_Tag as Tag; ?>

<?= Tag::form(array("products/search", "method" => "get")) ?>
  <label for="q">Search:</label>
  <?= Tag::textField("q") ?>
  <?= Tag::submitButton("Search") ?>
</form>
', 'php'); ?>
</div>

<div class="doc-paragraph">
	This will generate the following HTML:
</div>

<div class="doc-center">
<?php echo hyperlight('
<form action="/phalconphp/products/search/" method="get">
 <label for="q">Search:</label>
 <input type="text" id="q" value="" name="q" />
 <input type="submit" value="Search" />
</endform>
', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="form-elements">Helpers to Generate Form Elements</a></h3>
	Phalcon provides a series of helpers to generate form elements such as
	textfields, buttons and more. The first parameter to these is always the name of the input.
	When the form is submitted, the name will be passed along with the form data.
	In the controller you can recover those values with the same name using methods getPost or getQuery
	in <?php echo Tag::classLink('Phalcon_Request') ?>
</div>

<div class="doc-center">
<?php echo hyperlight('
<?= Phalcon_Tag::textField(array("parent_id", "value"=> "5")) ?>
<?= Phalcon_Tag::textArea(array("comment" "Nice article", "cols" => "6", "rows" => 20)) ?>
<?= Phalcon_Tag::passwordField("password") ?>
<?= Phalcon_Tag::hiddenField(array("parent_id", "value"=> "5") ?>
', 'php'); ?>

<div class="doc-paragraph">
	<h3><a name="select-boxes">Making Select Boxes</a></h3>
	Generating select boxes (combo list) are easy, especially if you have the related data in PHP variables.
	The helpers destined to this task are Phalcon_Tag::select and Phalcon_Tag::selectStatic. The first one
	was specifically designed to work with <?php echo Tag::classLink('Phalcon_Model_Base') ?>. Another
	could be used with PHP arrays.
</div>

<div class="doc-center">
<?php echo hyperlight('
//Using data from a resultset
echo Phalcon_Tag::select(array(
    "productsId",
    Products::find("type = \'vegetables\'"),
    "using" => array("id", "name")
));

//Using data from an array
echo Phalcon_Tag::selectStatic(array(
    "status",
    array(
       "A" => "Active",
       "I" => "Inactive"
    )
))', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	The following HTML will generated respectively:
</div>

<div class="doc-center">
<?php echo hyperlight('

<select id="productsId" name="productsId">
  <option value="101">Tomato</option>
  <option value="102">Lettuce</option>
  <option value="103">Beans</option>
</select>

<select id="status" name="status">
  <option value="A">Active</option>
  <option value="I">Inactive</option>
</select>

', 'iphp') ?>
</div>

<div class="doc-paragraph">
	<h3><a name="assigning">Assigning HTML attributes</a></h3>
	All the helpers receive an array as its first parameter. This can contain HTML specific
	attributes for the helper. Those attributes will be generated as HTML at the output.
</div>

<div class="doc-center">
<?php echo hyperlight('
<?= Phalcon_Tag::textField(array(
  "price",
  "size" => 20,
  "maxlength" => 30,
  "placeholder" => "Enter a price"
)) ?>
', 'iphp') ?>
</div>

<div class="doc-paragraph">
	<h3><a name="setting-values">Setting Helper Values</a></h3>
	<h4>From Controllers</h4>
	Usually, We need to set specific values for form elements in the view. You
	can directly set those values from the controller using Phalcon_Tag::setDefaultValue().
	It preloads a value for any future helpers present in the view. If any helper is present
	in the view that matches any preload value, it will be used to it, unless, a value is directly
	assigned on the helper.
</div>

<div class="doc-center">
<?php echo hyperlight('
class ProductsController extends Phalcon_Controller
{

  function indexAction()
  {
    Phalcon_Tag::setDefaultValue("color", "Blue");
  }

}
', 'iphp'); ?>
</div>

<div class="doc-paragraph">
Then at the view, a selectStatic helper matches the same index used to pre-set the value. In this case "color":
</div>

<div class="doc-center">
<?php echo hyperlight('
echo Phalcon_Tag::selectStatic(array(
    "color",
    array(
       "Yellow" => "Yellow",
       "Blue" => "Blue",
       "Red" => "Red"
    )
))', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	This will generate the following SELECT tag with the value "Blue" selected:
</div>

<div class="doc-center">
<?php echo hyperlight('

<select id="color" name="color">
  <option value="Yellow">Yellow</option>
  <option value="Blue" selected="selected">Blue</option>
  <option value="Red">Red</option>
</select>

', 'iphp') ?>

<div class="doc-paragraph">
	<h4>From Request</h4>
	A special feature of helpers generated by Phalcon_Tag is that it helps to keep the values
	of form helpers between requests. Thus, you can easily show validation messages without
	losing entered data.
</div>

<div class="doc-paragraph">
	<h4>Specifing values directly</h4>
	Every form helper supports the parameter "value". With it you can specify a value for the helper
	directly. When this parameter is present, some preset value using setDefaultValue or via request will be ignored.
</div>

<div class="doc-paragraph">
	<h3><a name="title">Changing dynamically the Document Title</a></h3>
	Phalcon_Tag supplies helpers to change dynamically the document title from the controller.
	The following example will show you how doing that:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class PostsController extends Phalcon_Controller {

  function initialize()
  {
    Phalcon_Tag::setTitle(" Your Website");
  }

  function indexAction()
  {
    Phalcon_Tag::prependTitle("Index of Posts - ");
  }

}
', 'php'); ?>
</div>

<div class="doc-center">
<?php echo hyperlight('
<html>
  <head>
    <title><?= Phalcon_Tag::getTitle() ?></title>
  </head>
  <body>

  </body>
</html>
', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	The following HTML will generated:
</div>

<div class="doc-center">
<?php echo hyperlight('
<html>
  <head>
    <title>Index of Posts - Your Website</title>
  </head>
  <body>

  </body>
</html>
', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="static">Static Content Helpers</a></h3>
	Phalcon_Tag also provide helpers to generate tags such as script, link or img. They help you to
	easily generate a public location to your static resources at the document root or outside:
</div>

<div class="doc-paragraph">
	Insert images:
</div>

<div class="doc-center">
<?php echo hyperlight('

//Generate <img src="/your-app/img/hello.gif">
echo Phalcon_Tag::image("img/hello.gif");

//Generate <img alt="alternative text" src="/your-app/img/hello.gif">
echo Phalcon_Tag::image(array(
	"img/hello.gif",
	"alt" => "alternative text"
));

', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	Include Stylesheet:
</div>

<div class="doc-center">
<?php echo hyperlight('
//Generate <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Rosario" type="text/css">
echo Phalcon_Tag::stylesheetLink("http://fonts.googleapis.com/css?family=Rosario", false);

//Generate <link rel="stylesheet" href="/your-app/css/styles.css" type="text/css">
echo Phalcon_Tag::stylesheetLink("css/styles.css");
', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	Include Javascript:
</div>

<div class="doc-center">
<?php echo hyperlight('
//Generate <script src="http://localhost/javascript/jquery.min.js" type="text/javascript"></script>
echo Phalcon_Tag::javascriptInclude("http://localhost/javascript/jquery.min.js", false);

//Generate <script src="/your-app/javascript/jquery.min.js" type="text/javascript"></script>
echo Phalcon_Tag::javascriptInclude("javascript/jquery.min.js");
', 'iphp'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="creating-own">Creating your own helpers</a></h3>
	Maybe you want to create a new helper to fulfill any specific need. You could create a new class
	that extends from Phalcon_Tag and implement the new helper:
</div>


<div class="doc-center">
<?php echo hyperlight('<?php

class MyTags extends Phalcon_Tag
{

  /**
   * Generates a widget to show a HTML5 audio tag
   *
   * @param array
   * @return string
   */
  static function audioField($parameters)
  {

     //Converting parameters to array if it is not
     if (!is_array($parameters)) {
        $parameters = array($parameters);
     }

     //Determining attributes "id" and "name"
     if (!isset($parameters[0])) {
        $parameters[0] = $parameters["id"];
     }

     $id = $parameters[0];
     if (!isset($parameters["name"])) {
        $parameters["name"] = $id;
     } else {
        if(!$parameters["name"]){
            $parameters["name"] = $id;
        }
     }

     //Determining widget value,
     //Phalcon_Tag::setDefault() allows to set the widget value
     if (isset($parameters["value"])) {
        $value = $parameters["value"];
        unset($parameters["value"]);
     } else {
        $value = self::getValue($id);
     }

     //Generate the tag code
     $code = \'<audio id="\'.$id.\'" value="\'.$value.\'" \';
     foreach ($parameters as $key => $attributeValue) {
        if (!is_integer($key)) {
            $code.= $key.\'="\'.$attributeValue.\'" \';
        }
     }
     $code.=" />";

     return $code;
   }

}

', 'iphp'); ?>
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/views', 'â Using Views') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/routing', 'Routing â') ?>
			</td>
		</tr>
	</table>
</div>
