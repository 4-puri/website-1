
<div class="nav-bar">
	<?php echo Phalcon\Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Phalcon Developer Tools</h2>
	This tools provides you useful scripts to generate code helping to develop faster and easy
	applications that use Phalcon framework.
</div>

<div class="doc-paragraph highlightb">
	<b>Important:</b> You need at least Phalcon Framework version 0.4.0 to use developer tools.
	Also is recommended to have installed PHP 5.3.6 as minimum.
</div>

<div class="doc-video">
	<iframe src="http://player.vimeo.com/video/39035250" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</div>

<div class="doc-paragraph">
	If you prefer a web interface over a console, check <a href="http://blog.phalconphp.com/post/23251010409/dont-like-command-line-and-consoles-no-problem">this out</a>.
</div>

<div class="doc-paragraph">
	<h3>Download</h3>
	You can download a cross platform package containing the developer tools from the
	<?php echo Phalcon\Tag::linkTo('download', 'download page') ?>. Also you can clone it
	from <a href="https://github.com/phalcon/phalcon-devtools">Github</a>.
</div>

<div class="doc-paragraph">
	<h4><a name="installation">Installation</a></h4>
	These are detailed instructions on how to install the developer tools on different platforms:
	<ul>
		<li><?php echo Phalcon\Tag::linkTo('documentation/wintools', 'Installation on Windows') ?></li>
		<li><?php echo Phalcon\Tag::linkTo('documentation/mactools', 'Installation on OS X') ?></li>
		<li><?php echo Phalcon\Tag::linkTo('documentation/linuxtools', 'Installation on Linux') ?></li>
	</ul>
</div>

<div class="doc-paragraph">
	<h3><a name="available">Getting Available Commands</a></h3>
	You can get a list of available commands in Phalcon tools by typing: phalcon commands
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-4.png') ?>
</div>

<div class="doc-paragraph">
	<h3><a name="generating-project">Generating a Project Skeleton</a></h3>
	You can use Phalcon tools to generate pre-defined project skeletons for your applications
	with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache.
</div>

<div class="doc-paragraph">
	Type the following command on your web server document root:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-1.png') ?>
</div>

<div class="doc-paragraph">
	The above recommended project structure was generated:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-2.png') ?>
</div>

<div class="doc-paragraph">
	You could add the parameter <i>--help</i> to get help on the usage of a certain script:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-3.png') ?>
</div>

<div class="doc-paragraph">
	Accessing the project from the web server will show you:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-6.png') ?>
</div>

<div class="doc-paragraph">
	<h3><a name="generating-controllers">Generating Controllers</a></h3>
	The command "create-controller" will provide you the posibillity to generate controller skeletons.
	It's important to invoke this command inside a directory that already have a Phalcon project.
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-5.png') ?>
</div>

<div class="doc-paragraph">
	The following code is generated by the script:
</div>

<div align="center">
	<?php echo hyperlight('<?php

class TestController extends Phalcon_Controller {

	public function indexAction(){

	}

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="settings">Preparing Database Settings</a></h3>
	When a project is generated using developer tools. A configuration file can be found in <i>app/config/config.ini</i>
	To generate models or scaffold is necessary to modify these settings to acomomdate to your database configuration.
	A complete guide to the settings supported by Phalcon can be found <?php echo Phalcon\Tag::linkTo('documentation/settings', 'here') ?>
</div>

<div class="doc-paragraph">
	Change the database section at your config.ini file:
</div>

<div align="center">
	<?php echo hyperlight('
[database]
adapter = Mysql
host = "127.0.0.1"
username = "root"
password = "secret"
name = "store_db"

[phalcon]
controllersDir = "../app/controllers/"
modelsDir = "../app/models/"
viewsDir = "../app/views/"
baseUri = "/store/"
', 'php'); ?>
</div>

<div class="doc-paragraph">
	<h3><a name="generating-models">Generating Models</a></h3>
	There are several options to create models. You can create all models from the default database connection
	or a single one. Models can have public attributes or be accessed by setters/getters.
</div>

<div class="doc-paragraph">
	The most simple way to generate a model is:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-7.png') ?>
</div>

<div class="doc-paragraph">
	All table attributes have been declared public so you can access it directly.
</div>

<div align="center">
	<?php echo hyperlight('
<?php

class Products extends Phalcon_Model_Base {

	/**
	 * @var integer
	 */
	public $id;

	/**
	 * @var integer
	 */
	public $types_id;

	/**
	 * @var string
	 */
	public $name;

	/**
	 * @var string
	 */
	public $price;

	/**
	 * @var integer
	 */
	public $quantity;

	/**
	 * @var string
	 */
	public $status;

}
', 'php'); ?>
</div>

<div class="doc-paragraph">
	By adding the <i>--gen-setters-getters</i> you can generate the class attributes with protected
	visibility and accessing them with setter/getter methods. Those methods can help you to implement
	business rules for a specific attribute of the model.
</div>

<div align="center">
	<?php echo hyperlight('<?php

class Products extends Phalcon_Model_Base {

	/**
	 * @var integer
	 */
	protected $id;

	/**
	 * @var integer
	 */
	protected $types_id;

	/**
	 * @var string
	 */
	protected $name;

	/**
	 * @var string
	 */
	protected $price;

	/**
	 * @var integer
	 */
	protected $quantity;

	/**
	 * @var string
	 */
	protected $status;


	/**
	 * Method to set the value of field id
	 * @param integer $id
	 */
	public function setId($id){
		$this->id = $id;
	}

	/**
	 * Method to set the value of field types_id
	 * @param integer $types_id
	 */
	public function setTypesId($types_id){
		$this->types_id = $types_id;
	}

	...

	/**
	 * Returns the value of field status
	 * @return string
	 */
	public function getStatus(){
		return $this->status;
	}

}
', 'php'); ?>
</div>

<div class="doc-paragraph">
	A nice feature of the model generator is that it keeps changes made by the developer between code generations.
	This allows to add or remove fields without be worried about losing any change made to the model. The following
	screencast shows you how it works:
</div>

<div class="doc-video">
	<iframe src="http://player.vimeo.com/video/39035250" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</div>

<div class="doc-paragraph">
	<h3><a name="scaffold">Scaffold a CRUD</a></h3>
	Scaffolding is a quick way to generate some of the major pieces of an application.
	If you want to create the models, views, and controllers for a new resource in a single operation,
	scaffolding is the tool for the job. You’ll most probably want to customize the generated code.
	Many developers avoid scaffolding entirely, preferring to write all or most of their source code from scratch.
</div>

<div class="doc-paragraph">
	The generated code can be a guide to a better understanding of how the framework works or develop prototypes.
</div>

<div class="doc-paragraph">
	Scaffold based on the table "products":
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-9.png') ?>
</div>

<div class="doc-paragraph">
	The scaffold generator will build several files in your application, along with some folders.
	Here’s a quick overview of what it creates:
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>File</th>
			<th>Purpose</th>
		</tr>
		<tr>
			<td>app/controllers/ProductsController.php</td>
			<td>The Products controller</td>
		</tr>
		<tr>
			<td>app/models/Products.php</td>
			<td>The Products model</td>
		</tr>
		<tr>
			<td>app/views/layout/products.phtml</td>
			<td>Controller layout for Products</td>
		</tr>
		<tr>
			<td>app/views/products/new.phtml</td>
			<td>View for the action "new"</td>
		</tr>
		<tr>
			<td>app/views/products/edit.phtml</td>
			<td>View for the action "edit"</td>
		</tr>
		<tr>
			<td>app/views/products/search.phtml</td>
			<td>View for the action "search"</td>
		</tr>
		<tr>
			<td>app/views/products/edit.phtml</td>
			<td>View for the action "edit"</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	When browsing the recently generated controller, you first will find a search form and a link to create a new Product:
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-10.png') ?>
</div>

<div class="doc-paragraph">
	The "create page" allows you to create products applying validations on the Products model. Phalcon
	automatically will validate not null fields producing warns if any of them is required.
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-11.png') ?>
</div>

<div class="doc-paragraph">
	After doing a search, a pager will be available to show gradually the results. Use the "Edit" or "Delete" links in front of every result to take those actions on them.
</div>

<div class="doc-paragraph image-center">
	<?php echo Phalcon\Tag::image('img/tools-12.png') ?>
</div>

<div class="doc-paragraph">
	<h3><a name="scaffold-bootstrap">Scaffold with Twitter/Bootstrap</a></h3>
	After the release of the amazing framework <a href="http://twitter.github.com/bootstrap/">Bootstrap</a>
	from Twitter many tools has been created around it. Phalcon Developer Tools provides a modified
	version of the standard scaffold script to generate customized code ready to use with bootstrap.
</div>

<div class="doc-center">
<?php echo hyperlight('# phalcon scaffold-bootstrap --table-name products', 'php'); ?>
</div>

<div class="doc-paragraph">
	We have created a sample application that is mostly created with this script.
	There is a detailed article <a href="http://blog.phalconphp.com/post/20928554661/invo-a-sample-application">here</a>.
	That application shows how to load bootstrap libraries in any development with Phalcon.
</div>

<div class="doc-paragraph">
	<h3><a name="web">Web Interface to Tools</a></h3>
	Also, if you prefer, it's possible to use Phalcon Developer Tools from a web interfase. Check out
	the following screencast to figure out how it works:
</div>

<div class="doc-video">
	<iframe src="http://player.vimeo.com/video/42367665" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</div>

<div class="doc-paragraph">
	<h3><a name="phpstorm">Integrating Tools with PhpStorm IDE</a></h3>
	The below screencast shows how to integrate developer tools with the <a href="http://www.jetbrains.com/phpstorm/">PhpStorm IDE</a>.
	The configuration steps could be easily adapted to others IDEs for PHP.
</div>

<div class="doc-video">
	<iframe src="http://player.vimeo.com/video/43455647" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
</div>

<div class="doc-paragraph">
	<h3>Conclusion</h3>
	Phalcon Developer Tools provide you an easy way to codify parts of your applications reducing
	the number of errors introducing by mistake when coding.
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon\Tag::linkTo('documentation/debug', '← Debugging Applications') ?>
			</td>
			<td align="right">
				<?php echo Phalcon\Tag::linkTo('documentation/settings', 'Framework Settings →') ?>
			</td>
		</tr>
	</table>
</div>