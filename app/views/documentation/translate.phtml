<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Multi-lingual Support</h2>
	The component <?php echo Tag::classLink('Phalcon_Translate') ?> expects to help you creating multi-language applications.
	This type of applications require display content in multiple languages depending on the user's language.
</div>

<div class="doc-paragraph">
	<h3><a name="adapters">Adapters</a></h3>
	This component makes use of adapters to read translation messages from different sources in a unified way.
</div>

<div class="doc-paragraph">
	<table align="center" cellspacing="0">
		<tr>
			<th>Adapter</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Array</td>
			<td>Uses PHP arrays to store the messages. In terms of performance is the best.</td>
		</tr>
	</table>
</div>

<div class="doc-paragraph">
	<h3><a name="usage">Component Usage</a></h3>
	Translation files are stored in files, the structure of these files could change depending of the adapter used.
	Phalcon gives you the freedom to organize your translation messages. A very simpler structure could be the following:
</div>

<div class="doc-center">
<?php echo hyperlight('app/messages/en.php
app/messages/es.php
app/messages/fr.php
app/messages/zh.php', 'iphp') ?>
</div>

<div class="doc-paragraph">
	Each file contains a hash with the translations, each message has a unique index that should be the same
	in other message files:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php
//app/messages/es.php
$messages = array(
	"hi" => "Hello",
	"bye" => "Good Bye",
	"hi-name" => "Hello %name%",
	"song" => "This song is %song%"
);', 'php') ?>

</div>

<div class="doc-center">
<?php echo hyperlight('<?php
//app/messages/fr.php
$messages = array(
	"hi" => "Bonjour",
	"bye" => "Au revoir",
	"hi-name" => "Bonjour %name%",
	"song" => "La chanson est %song%"
);', 'php') ?>

</div>

<div class="doc-paragraph">
	Now, it's time to load the correct translation file according to the user environment.
	A simpler way is getting this data from the $_SERVER['HTTP_ACCEPT_LANGUAGE'] header, or,
	If you prefer, access directly to that value by calling $this->request->getBestLanguage() inside an action/controller:
</div>

<?php

echo hyperlight('<?php

class UserController extends Phalcon_Controller {

  function _getTranslation(){

    //Tell browser what is the best language
    $language = $this->request->getBestLanguage();

    //Check if we have a translation file for that lang
    if(file_exists("app/messages/".$language.".php")){
       require "app/messages/".$language.".php";
    } else {
       // fallback to some default
       require "app/messages/en.php";
    }

    //Return a translation object
    return new Phalcon_Translate("Array", array(
       "content" => $messages
    ));

  }

  function indexAction(){
    $this->view->setVar("name", "Mike");
    $this->view->setVar("t", $this->_getTranslation());
  }

}

', 'php'); ?>

<div class="doc-paragraph">
	We've implemented a method _getTranslation, it will be available for other actions that require translation too.
	The $t variable is passed to the views, with it, we can get translations for the messages file loaded previously:
</div>

<div class="doc-center">
<?php echo hyperlight('
<!-- welcome -->
<p><?php echo $t->_("hi"), " ", $name; ?></p>

', 'iphp') ?>

</div>

<div class="doc-paragraph">
	The "_" function is the resposible to query the message according to the index given.
	Some translation messages could have placeholders, for example: Hello %name%. Those can be replaced
	using an extra parameter when getting the translation:
</div>

<div class="doc-center">
<?php echo hyperlight('
<!-- welcome -->
<p><?php echo $t->_("hi-name", array($name)); ?></p>', 'iphp') ?>

</div>

<div class="doc-paragraph">
	Note that "hi" and "hi-name" are related to different messages, but just only one of them
	require a placeholder.
</div>

<div class="doc-paragraph">
	Some websites implement urls like http://www.mozilla.org/<b>es-ES</b>/firefox/, where the
	actual language/locale is passed as part of the uri. You can do this with Phalcon, implementing
	a <?php echo Phalcon_Tag::linkTo('documentation/routing', 'regex router') ?>.
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/acl', '← Access Control Lists (ACL)') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/db', 'Database Abstraction Layer →') ?>
			</td>
		</tr>
	</table>
</div>
