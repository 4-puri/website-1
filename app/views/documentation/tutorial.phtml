
<div class="nav-bar">
	<?php echo Phalcon_Tag::linkTo('index', 'Home') ?> » Documentation
</div>

<div class="doc-paragraph">
	<h2>Let’s learn by example</h2>
	Throughout this tutorial, we’ll walk you through the creation of a simple registration form from scratch.
	Also we'll explain the basic aspects of the framework behavior. If you like more code generators stuff
	can also read about <?php echo Phalcon_Tag::linkTo('documentation/tools', 'developer tools') ?>.
</div>

<div class="doc-paragraph">
	<h3><a name="checking">Checking your installation</a></h3>
	We’ll assume you have Phalcon installed already. Check your phpinfo() output for
	something talking about "Phalcon" or execute the next code snippet:
</div>

<?php echo hyperlight('<?php print_r(get_loaded_extensions()); ?>', 'php'); ?>

<div class="doc-paragraph">
Phalcon extension should appear in output:
</div>

<?php echo hyperlight('Array
(
    [0] => Core
    [1] => libxml
    [2] => filter
    [3] => SPL
    [4] => standard
    [5] => phalcon
    [6] => mysql
)', 'php'); ?>

<div class="doc-paragraph">
	<h3><a href="creating-project">Creating a project</a></h3>
	The best way to use this guide is to follow each step as it happens, no code or step needed to make
	this example application has been left out, and so you can literally follow along step by step.
	You can get the complete code <?php echo Phalcon_Tag::linkTo('files/phalcon-tutorial.zip', 'here') ?>.
</div>

<div class="doc-paragraph">
	<h4>File structure</h4>
	You are not forced to implement a pre-defined file structure for your projects.
	The Phalcon loose-coupled nature gives you the free to choose the file structure you like.
	For academic purposes we suggest you to use the next structure:

	<?php echo hyperlight('test/
 app/
  controllers/
  models/
  views/
 public/
  css/
  img/
  javascript/
', 'php'); ?>

</div>

<div class="doc-paragraph">
	Note that you don't need any "library" directory related to Phalcon. The framework is available
	at any place without copy or load additional files.
</div>

<div class="doc-paragraph">
	<h4><a name="pretty-urls">Pretty URLs</a></h4>
	We'll use pretty urls for this tutorial. Friendy URLs are better for search engine SEO.
	Phalcon supports rewrite engines provided by most popular web servers. Also you can write
	the application without a rewrite engine. In this example we'll use the rewrite engine for Apache.
	Let's create a couple of rewrite rules in the /.htaccess file:
	<?php echo hyperlight('#/.htaccess
<IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteRule  ^$ public/    [L]
    RewriteRule  (.*) public/$1 [L]
</IfModule>', 'php'); ?>
	All requests to the project directory will rewritten to the public/ directory making this as document root.
	It will also that internal project directories will be hidden from the public. Our second rules will
	check if requested file exists doesn't be rewritten by the engine:
	<?php echo hyperlight('#/public/.htaccess
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^(.*)$ index.php?_url=$1 [QSA,L]
</IfModule>', 'php'); ?>
</div>

<div class="doc-paragraph">
	<h4><a name="bootstrap">Bootstrap</a></h4>
	The first file you need to create is the bootstrap file. This file is very important; it will give
	you all the project control. At that file you can implement the application behavior and integrate
	the components of your choose.
</div>

<div class="doc-paragraph">
	Now we'll use the tools provided by the framework to implement MVC architecture with Phalcon.
	The <?php echo Tag::classLink('Phalcon_Controller_Front') ?> will easily allow us to orquest the MVC flow. This class automatically
	will instantiate Phalcon classes required to make the MVC work. The public/index.php file
	should looks like:
</div>

<?php echo hyperlight('<?php

try {

 $front = Phalcon_Controller_Front::getInstance();

 //Setting directories
 $front->setControllersDir("../app/controllers/");
 $front->setModelsDir("../app/models/");
 $front->setViewsDir("../app/views/");

 //Printing view output
 echo $front->dispatchLoop()->getContent();

}
catch(Phalcon_Exception $e){
 echo "PhalconException: ", $e->getMessage();
}', 'php'); ?>


<div class="doc-paragraph">
	The <?php echo Tag::classLink('Phalcon_Controller_Front') ?> purpose is to initialize the request environment, route the incoming request,
	and then dispatch any discovered actions; it aggregates any responses and returns them when the
	process is complete.
</div>

<div class="doc-paragraph">
	<h4><a name="creating-controller">Creating a Controller</a></h4>
	By default Phalcon will look for a controller named "Index". It will be the starting point when no controller
	or action was given. The index controller (app/controllers/IndexController.php) looks like:
	<?php echo hyperlight('<?php

class IndexController extends Phalcon_Controller {

	function indexAction(){
		echo "<h1>Hello!</h1>";
	}

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	The controller classes should have the suffix "Controller" and controller actions have the suffix "Action".
	Your browser will show something like this:
</div>

<div class="doc-paragraph" align="center">
	<?php echo Phalcon_Tag::image('img/tutorial-1.png') ?>
</div>

<div class="doc-paragraph">
	Congratulations, you’re flying with Phalcon!
</div>

<div class="doc-paragraph">
	<h4><a name="moving-view">Moving output to a view</a></h4>
	But doing ouput inside actions it's ugly for MVC lovers. Let's move it to a related view (app/views/index/index.phtml):
</div>

<?php echo hyperlight('<?php echo "<h1>Hello!</h1>"; ', 'php'); ?>

<div class="doc-paragraph">
	Our controller (app/controllers/IndexController.php) now has a empty action definition:
</div>

<?php echo hyperlight('<?php

class IndexController extends Phalcon_Controller {

	function indexAction(){

	}

}', 'php'); ?>

<div class="doc-paragraph">
	The browser output should remain the same. The <?php echo Tag::classLink('Phalcon_View') ?> component will check for a view with the same name
	of active action on a directory with the name of active controller.
	Learn more about views usage <?php echo Tag::linkTo('documentation/views', 'here') ?>.
</div>

<div class="doc-paragraph">
	<h4><a name="designing-form">Designing a sign up form</a></h4>
	Now we'll change the index.phtml view to add a link to a new controller named "signup".
	Its goal is to allow users to sign up in some application.
</div>

<?php echo hyperlight('<?php

echo "<h1>Hello!</h1>";

echo Phalcon_Tag::linkTo("signup", "Sign Up Here!");

?>',

'php'); ?>

<div class="doc-paragraph">
The generated HTML code brings a A html tag linking to a new controller:
</div>

<?php echo hyperlight('<h1>Hello!</h1> <a href="/test/signup" >Sign Up Here!</a>', 'php'); ?>

<div class="doc-paragraph">
	A new class <?php echo Tag::classLink('Phalcon_Tag') ?> has made its entrance. Its purpose it's to help to build HTML tags with framework conventions in mind.
	A deeper article about HTML generation can be found <?php echo Phalcon_Tag::linkTo('documentation/tags', 'here') ?>
</div>

<div class="doc-paragraph" align="center">
	<?php echo Phalcon_Tag::image('img/tutorial-2.png') ?>
</div>

<div class="doc-paragraph">
Here's the controller Signup (app/controllers/SignupController.php):
</div>

<?php echo hyperlight('<?php

class SignupController extends Phalcon_Controller {

	function indexAction(){

	}

}', 'php'); ?>

<div class="doc-paragraph">
	The empty index action gives the clean pass to a view with the form definition:
</div>

<?php echo hyperlight('<h2>Sign using this form</h2>

<?= Phalcon_Tag::form("signup/register") ?>

 <p>
    <label for="name">Name</label>
    <?= Phalcon_Tag::textField("name") ?>
 </p>

 <p>
    <label for="name">E-Mail</label>
    <?= Phalcon_Tag::textField("email") ?>
 </p>

 <p>
    <?= Phalcon_Tag::submitButton("Register") ?>
 </p>

</form>', 'php'); ?>

<div class="doc-paragraph">
	View the form in your browser will show something like this:
</div>

<div class="doc-paragraph" align="center">
	<?php echo Phalcon_Tag::image('img/tutorial-3.png') ?>
</div>

<div class="doc-paragraph">
	As you can see <?php echo Tag::classLink('Phalcon_Tag') ?> also provides useful methods to build forms elements.
</div>

<div class="doc-paragraph">
	The Phalcon_Tag::form method receives only one parameter in the example. A relative uri
	to a controller/action inside the application. By doing click in the "Send" button will show you
	an exception from the framework requesting for the missing "register" action in the controller "signup":
</div>

<?php echo hyperlight('PhalconException: Action "register" was not found on controller "signup"', 'php'); ?>

<div class="doc-paragraph">
Implementing that method will fix the exception:
</div>

<div class="doc-center">
<?php echo hyperlight('<?php

class SignupController extends Phalcon_Controller {

	function indexAction(){

	}

	function registerAction(){

	}

}', 'php'); ?>
</div>

<div class="doc-paragraph">
	Now make click in the "Send" button will show you a blank page. The name and email input provided by the user should be stored
	on a database. The MVC suggest us to use the models part to manage database tables in a object oriented way.
</div>

<div class="doc-paragraph">
	<h4><a name="model">Creating a Model</a></h4>
	Phalcon bring to us the first ORM for PHP entirely written in C-language. Far from increasing the complexity of development, simplifies it.
	Before of create our first model, we need a database table to map it.
</div>

<div class="doc-paragraph">
	A simple table to store registered users can be created like this:
</div>

<?php echo hyperlight('CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(70) NOT NULL,
  `email` varchar(70) NOT NULL,
  PRIMARY KEY (`id`)
);', 'php'); ?>

<div class="doc-paragraph">
	A model should be located in the apps/models directory. The model mapping to "users" table:
</div>

<?php echo hyperlight('<?php

class Users extends Phalcon_Model_Base {

}', 'php'); ?>

<div class="doc-paragraph">
	<h4><a name="database">Setting a Database Connection</a></h4>
	There is not complexity about using models. But we forgot one small detail. We need to tell Phalcon
	which connection database parameters users class needs to successfully map table with it.
	The <?php echo Tag::classLink('Phalcon_Controller_Front') ?> config in the bootstrap file should be modified to
	add the new configuration settings:

	<?php echo hyperlight('<?php

try {

 $front = Phalcon_Controller_Front::getInstance();

 //Setting up framework config
 $config = new Phalcon_Config(array(
   "database" => array(
     "adapter" => "Mysql",
     "host" => "localhost",
     "username" => "scott",
     "password" => "cheetah",
     "name" => "test_db"
   ),
   "phalcon" => array(
     "controllersDir" => "../app/controllers/",
     "modelsDir" => "../app/models/",
     "viewsDir" => "../app/views/"
   )
 ));
 $front->setConfig($config);

 //Printing view output
 echo $front->dispatchLoop()->getContent();

}
catch(Phalcon_Exception $e){
 echo "PhalconException: ", $e->getMessage();
}', 'php'); ?>
</div>

<div class="doc-paragraph">
	We previously replaced defined settings on a new <?php echo Tag::classLink('Phalcon_Config') ?> object with database configuration.
	Also you may define settings on a file by separate using ini or xml formats.
</div>

<div class="doc-paragraph">
	With database parameters our models are ready to work and interact.
</div>

<div class="doc-paragraph">
	<h4><a name="storing">Storing data using models</a></h4>
	Receiving data from the form and storing them in the table will be our next step.
</div>

<?php echo hyperlight('<?php

class SignupController extends Phalcon_Controller {

	function indexAction(){

	}

	function registerAction(){

		//Request variables from html form
		$name = $this->request->getPost("name", "string");
		$email = $this->request->getPost("email", "email");

		$user = new Users();
		$user->name = $name;
		$user->email = $email;

		//Store and check for errors
		if ($user->save() == true) {
			echo "Thanks for register!";
		} else {
			echo "Sorry, the next problems was generated: ";
			foreach ($user->getMessages() as $message){
				echo $message->getMessage(), "<br/>";
			}
		}
	}

}', 'php'); ?>

<div class="doc-paragraph">
	When you receive a variable from input you can optionally apply a filter to
	<?php echo Tag::linkTo('documentation/filter', 'validate/sanizite') ?> the values.
	This will make your application more secure. In the example we apply "string" to the "name" variable
	to ensure that user typed no malicious chars. The component <?php echo Tag::classLink('Phalcon_Filter') ?> makes the work in an implicit way.
</div>

<div class="doc-paragraph">
	Then instantiates Users class will give us the possibility to assign values to public members with the same name as fields in the table.
	The save method ends the storing process. The returning true value tells us if saving was successful or not. If we don't type any of the required files
	our screen will look like this:
</div>

<div class="doc-paragraph" align="center">
	<?php echo Phalcon_Tag::image('img/tutorial-4.png') ?>
</div>

<div class="doc-paragraph">
	<h4><a name="conclusion">Conclusion</a></h4>
	As you can see, it's easy to start developing an application using Phalcon.
	Check out the <?php echo Phalcon_Tag::linkTo(array('api/', 'Phalcon API')) ?> to get more details on the available functionality.
	If you want to check a more complete example the
	<a href="http://blog.phalconphp.com/post/20928554661/invo-a-sample-application">INVO application</a> is also available.
</div>

<div class="nav-bar">
	<table width="90%" align="center">
		<tr>
			<td align="left">
				<?php echo Phalcon_Tag::linkTo('documentation/install', '← Installation') ?>
			</td>
			<td align="right">
				<?php echo Phalcon_Tag::linkTo('documentation/mvc', 'The MVC Architecture →') ?>
			</td>
		</tr>
	</table>
</div>
